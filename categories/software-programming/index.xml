<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software Programming on zylhorse blog</title>
    <link>https://zylhorse.github.io/categories/software-programming/</link>
    <description>Recent content in Software Programming on zylhorse blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 23 Jan 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://zylhorse.github.io/categories/software-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>不同类型代码执行引擎</title>
      <link>https://zylhorse.github.io/blog/software-programming/%E8%99%9A%E6%8B%9F%E6%9C%BA/</link>
      <pubDate>Mon, 23 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/software-programming/%E8%99%9A%E6%8B%9F%E6%9C%BA/</guid>
      <description>概述 代码在物理机器上执行过程：
 代码被编译成二进制文件 二进制文件运行， 加载程序到内存中 CPU通过总线将内存中指令取出并放入指令流水线， 对指令进行 译码、执行、缓冲、回写（参考arm7 三级流水 和 arm9 五级流水）  类似于程序在物理机器上运行， 虚拟机上代码执行过程：
 代码被编译成相关字节码，然后在虚拟机上运行 虚拟机对字节码进行取指令、译码、执行、结果回写  虚拟机实现概念  将源码编译成VM所能执行的字节码 包含指令和操作数的数据结构 一个包含所有函数操作的调用栈 一个指令指针，用于指向下一条要被执行的指令 一个虚拟的CPU（指令派发者）： 取指， 译码，执行  虚拟机分类 主要区别是操作数和结果的存储和检索机制不一样。
栈虚拟机（stack vm）  基于栈的虚拟机有操作数栈的概念，首先从符号表中取出数据然后压入操作数栈 进行真正的运算时都是直接与操作数栈进行交互 运算时指令无需指定操作数， 因为默认操作数存放在操作数栈上， 直接从栈上pop出数据使用即可 运算后的将结果存入操作数栈顶  栈虚拟机优缺点 优点：
 不管任何操作都通过操作数栈进行， 可以无视具体的物理结构 指令紧凑，一两个字节即可存储 编译器实现简单 寄存器由硬件直接提供，不用进行寄存器分配 可移植性强  缺点：
 因为无论什么操作都要通过操作数栈， 所以速度慢  寄存器虚拟机 （register vm）  基于寄存器的虚拟机会分配虚拟寄存器，存放数据 进行运算时， 需要指定操作数的寄存器 虚拟机对寄存器进行解析，找出操作数的位置，然后取出操作数进行运算  寄存器虚拟机优缺点 优点：
 没有栈虚拟机在拷贝数据时进行大量的出入栈操作     栈式 VS 寄存器式 对比     指令条数 栈式 &amp;gt; 寄存器式   代码尺寸 栈式 &amp;lt; 寄存器式   移植性 栈式优于寄存器式   指令优化 栈式更不易优化   解释器执行速度 栈式解释器速度稍慢   代码生成难度 栈式简单   简易实现中的数据移动次数 栈式移动次数多    </description>
    </item>
    
    <item>
      <title>编程范式-函数式编程</title>
      <link>https://zylhorse.github.io/blog/software-programming/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/software-programming/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</guid>
      <description>函数式编程（Function Programming）  函数式编程将电脑运算看作是函数运算。 函数式编程的基础是λ 演算（ lambda caculus）。函数可以作为输入（参数）输出（返回值）。 函数式编程最古老的例子： 1958年创造出来的LISP。 #特性  函数是&amp;quot;第一公民&amp;quot;（first class） 函数可以作为变量
”表达式“ not ”语句“  ”表达式“（expression）是运算过程，总有返回值 ”语句“（statement）是操作，无返回值。 函数式编程要求只使用表达式，不使用语句， 每一步运算都有返回值。  无”副作用“（side effect）  ”副作用“：函数内部与外部互动（eg:函数内部修改全局变量），操作外部。 函数式编程强调没有”副作用“，保持独立，所有功能只是返回新值，不做其他行为尤其是不修改外部变量。  不修改&amp;quot;状态&amp;quot;（state)  函数式编程要求使用参数保存状态,状态不能保存在变量中。  引用透明（Referential transparency）  函数运行不依赖外部变量或”状态“，只根据输入参数，任何时候只要参数相同，引用函数所得到的结果总是相同。  闭包（closure capture）  闭包函数： 声明在一个函数中的函数，叫闭包函数 闭包： 闭包函数总是可以访问其所在的外部函数中声明的参数和变量，即使在其外部函数被返回（寿命终结）了之后   问题： 局部变量常驻内存，不被释放造成内存泄漏
 高阶函数 接受一个或多个函数作为输入，输出一个函数。
意义 代码简洁，开发迅速 编码中大量使用函数，减少代码重复。
更方便的代码管理 每一个函数都是独立单元，有利与单元测试（unit test）和除错（debugging），以及模块化组合。
易于并发编程 函数不用考虑”死锁“（deadlock），因为修改变量，不用担心被其他线程修改，可以将工作分摊到多个线程，部署”并发编程“（concurrency）。
代码热升级 因为函数式编程无副作用，只要保证接口不变，内部实现是外部无关的。所以可以在运行状态下直接升级代码，不需要重启。</description>
    </item>
    
    <item>
      <title>Extended Backus–Naur form</title>
      <link>https://zylhorse.github.io/blog/software-programming/ebnf/</link>
      <pubDate>Mon, 22 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/software-programming/ebnf/</guid>
      <description>计算机科学中， EBNF是一组元语法，表达上下文无关的语法。EBNF是用于对正规语言的语法进行描述， 例如计算机编程语言的语法。它是BNF的扩充。
基本要素 EBNF是一种表达正规语言语法的代码。一条EBNF由终结符号和非终结符产生规则组成，规则控制了终结符号如何组成合法的序列。例如： 终端符号包含：字母数字字符，标点符号，空白字符。
EBNF定义了把符号序列分配给非终端的产生规则：
digit excluding zero = &amp;quot;1&amp;quot; | &amp;quot;2&amp;quot; | &amp;quot;3&amp;quot; | &amp;quot;4&amp;quot; | &amp;quot;5&amp;quot; | &amp;quot;6&amp;quot; | &amp;quot;7&amp;quot; | &amp;quot;8&amp;quot; | &amp;quot;9&amp;quot; ;digit = &amp;quot;0&amp;quot; | digit excluding zero ; 这条产生规则定义了在表达式左边的非终结符digist。竖线|表示一种替代，终结符使用双引号&amp;quot;&amp;quot;包起来，后跟分号;作为终结字符。 因此digit 可以是0或者digit excluding zero(1或2或3，等等，直到9)
 产生规则可以包含一系列的终结符和非终结符，每个都用逗号(,)隔开:
twelve = &amp;quot;1&amp;quot;, &amp;quot;2&amp;quot; ;two hundred one = &amp;quot;2&amp;quot;, &amp;quot;0&amp;quot;, &amp;quot;1&amp;quot; ;three hundred twelve = &amp;quot;3&amp;quot;, twelve ;twelve thousand two hundred one = twelve, two hundred one ;可以省略或重复的表达式，用花括号{.</description>
    </item>
    
    <item>
      <title>Sandboxie（沙箱）网络编程虚拟执行环境</title>
      <link>https://zylhorse.github.io/blog/software-programming/%E6%B2%99%E7%AE%B1/</link>
      <pubDate>Sun, 22 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/software-programming/%E6%B2%99%E7%AE%B1/</guid>
      <description>关键字 Sandboxie（沙箱）网络编程虚拟执行环境
概念 沙箱是一个虚拟系统程序， 允许程序在沙箱环境中独立运行， 限制沙箱中程序对宿主系统的修改和影响。
有哪些限制 在沙箱中运行的程序，
 不能运行本地的可执行程序 不能从本地计算机文件系统中读取任何文件， 也不能往本地计算机系统中写入任何信息 不能查看本地计算机信息，特别是用户名，E-mail地址等  技术迭代  GreenBorder 为IE和Firefox构建安全的虚拟执行环境，用户对浏览器所作的任何写磁盘操作， 都将重定向到一个临时的文件中 Forcefield由ZoneAlarm开发， 功能雷士GreenBorder;  原理 Sandboxie 通过重定向技术，将程序生成和修改的文件重定向到自身的临时文件中（修改包括注册表和系统的核心数据）。通过加载自身的驱动来保护底层数据， 属于驱动级别保护。</description>
    </item>
    
    <item>
      <title>Scalar</title>
      <link>https://zylhorse.github.io/blog/software-programming/scalar/</link>
      <pubDate>Sat, 22 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/software-programming/scalar/</guid>
      <description>标量(Scalar),在计算机领域用于区分单个值(整数/浮点数/字符串)与数据结构(数组/结构/map)区分开。</description>
    </item>
    
    <item>
      <title>常见的开源许可协议和注意事项</title>
      <link>https://zylhorse.github.io/blog/software-programming/%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Fri, 11 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/software-programming/%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E5%8D%8F%E8%AE%AE/</guid>
      <description>GPL(GNU General Public License) GPL 出发点是代码的开源/免费使用和引用/修改/衍生代码的开源/免费使用， 不允许修改/衍生后的代码作为商业软件发布和销售。 代表： linux
BSD BSD开源协议允许自由的使用/修改源代码， 也可以将修改后的代码作为开源/专有软件发布。但是要满足三个条件：
 源码发布，需要在源码中携带原有代码的BSD协议 类库/软件发布， 需要在类库/软件的文档和版权声明中包含原有代码的BSD协议 不可以使用开源代码的作者/机构名字做市场推广  Apache license 2.0 类似BSD协议,Apache license 是对商业应用友好的许可
MIT 类似BSD协议,必须在修改/衍生的代码中保留原许可协议的声明。</description>
    </item>
    
    <item>
      <title>软件设计模式详解和代码示例</title>
      <link>https://zylhorse.github.io/blog/software-programming/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sun, 01 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/software-programming/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>概念 设计模式是在面向对象开发设计中反复出现问题的解决方案的总结。
设计原则  对接口编程而不是对实现编程 优先使用对象编程而不是继承  设计模式原则  针对接口编程而不是对实现编程 优先使用对象组合而不是继承  开闭原则（Open Close Principle）  对扩展开放， 对修改关闭 为使程序的扩展性好，易于维护和升级， 在程序需要进行扩展的时候，不去修改原有代码，使用接口和抽象类。  里氏代换原则（Liskov Substitution Principle）  任何基类可以出现的地方， 子类都可以出现。 只有当派生类可以替换掉基类，且软件的功能不受影响时， 基类才是真正被复用，而派生类也能够在基类的基础上增加新的行为。 里氏代换原则是对开闭原则的补充  依赖倒转原则（Dependence Inversion Principle）  针对接口编程，依赖于抽象而不依赖于具体 依赖倒转原则是开闭原则的基础  接口隔离原则（Interface Segregation Principle）  使用多个隔离的接口，比使用单个接口要好。降低类之间的耦合  迪米特原则，又称最少知道原则（Demeter Principle）  一个实体应当尽量地减少与其他实体之间发生相互作用， 使得系统模块相对独立  合成复用原则（Composite Reuse Principle）  尽量使用合成/聚合的方式，而不是使用继承  </description>
    </item>
    
    <item>
      <title>编程语言分类</title>
      <link>https://zylhorse.github.io/blog/software-programming/%E8%AF%AD%E8%A8%80%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Tue, 27 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/software-programming/%E8%AF%AD%E8%A8%80%E7%B1%BB%E5%9E%8B/</guid>
      <description>Program Errors  trapped errors：出错后程序终止执行，如：除0。 untrapped errors：出错后程序继续执行，会出现任意行为，如：缓冲区溢出。  Forbidden Behavious 语言设计时定义一组 Forbidden Behavious， 它必须包含所有的 untrapped errors，但可能包含 trapped errors。
Well behaved,ill behaved  well behaved:如果程序执行不出现forbidden behavious，则为 well behaved ill behaved： 否则是ill behaved。  动态、静态类型 静态类型 编译时拒绝 ill behaved 的语言是 statically  静态类型分为两种： 显式类型explicitly typed：类型是语言的一部分。隐式类型implicitly typed：类型通过编译推 动态类型 dynamically 运行时拒绝ill behaved的语言是 dynamically typed 类型安全： 是否在运行时进行类型检查，是否类型错误。 </description>
    </item>
    
    <item>
      <title>编程的基本风格或典范模式(programming paradigm)</title>
      <link>https://zylhorse.github.io/blog/software-programming/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/</link>
      <pubDate>Mon, 26 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/software-programming/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/</guid>
      <description>编程范式（programming paradigm） 概念  编程的基本风格或典范模式，是如何编写程序的方法论。 哲学观点：编程者在创造虚拟世界，而编程范式就是他们置身其中不自觉采用的世界观和方法论。 编程是为了解决问题，而解决问题可以有多种视角和思路，其中普适且行之有效的模式被归结为范式。 由于着眼点和思维方式不同，相应的范式有自己的侧重和偏向，因此范式常用&amp;rsquo;oriented&amp;rsquo;描述。换言之每种范式都引导编程者带着某种倾向去分析问题、解决问题，这不就是‘导向’吗？ 编程范式是抽象的，必须通过具体的编程语言来体现。任何编程语言在设计中都会倾向于某些编程范式，一种编程范式可以在不同的编程语言中体现，一种编程语言也可以适用多种范式。  常见编程范式  命令式（Imperative Programming）
命令“机器”如何去做(how)，这样不管你想要的是什么(what)，它都会按照命令实现。 声明式（Declarative Programming) 告诉“机器”你想要的是什么(what)，让“机器”推导如何去做(how).  函数式（Function Programming） 将机器运算当作是函数运算，并且避免使用程序状态及易变对象 逻辑编程（Logic programming） 设置答案需要匹配的规则解决问题，而不是设置步骤解决问题。编程语言：Prolog 过程式（Procedural Programming) 主要采用程序调用（Procedure call）或函数调用（Function call）来进行流程控制。 面向对象(Object Programming） 对象作为程序的单元，将程序和数据封装其中。对象是相互独立和相互调用。 </description>
    </item>
    
  </channel>
</rss>
