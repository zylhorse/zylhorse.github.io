<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Database on zylhorse blog</title>
    <link>https://zylhorse.github.io/categories/database/</link>
    <description>Recent content in Database on zylhorse blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 15 Jul 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://zylhorse.github.io/categories/database/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Oracle数据库安装配置</title>
      <link>https://zylhorse.github.io/blog/database/oracle/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 15 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/database/oracle/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</guid>
      <description>docker安装 sudo docker pull deepdiver/docker-oracle-xe-11gsudo docker run -d -p 1522:22 -p 1521:1521 --name oracle deepdiver/docker-oracle-xe-11gclient https://www.oracle.com/database/technologies/instant-client/linux-x86-64-downloads.html
 basic sdk sqlplus  链接动态库 #!/bin/bashln /opt/instantclient_11_2/libclntsh.so.11.1 /usr/lib/libclntsh.soln /optinstantclient_11_2/libnnz11.so /usr/lib/libnnz11.soln /opt/instantclient_11_2/libocci.so.11.1 /usr/lib/libocci.soln /opt/instantclient_11_2/libociei.so /usr/lib/libociei.soln /opt/instantclient_11_2/libocijdbc11.so /usr/lib/libocijdbc11.soln /opt/instantclient_11_2/libsqlplusic.so /usr/lib/libsqlplusic.soln /opt/instantclient_11_2/libsqlplus.so /usr/lib/libsqlplus.so添加动态库到系统 echo /opt/instantclient_11_2 &amp;gt;&amp;gt; /etc/ld.so.confldconfig安装 oracle client 下载地址： https://www.oracle.com/database/technologies/112010-win64soft.html
错误提示  不满足安装条件, oracle 没有配置当前系统的支持   修改stage/cvu/cvu_prereq.xml添加
  &amp;lt;OPERATING_SYSTEM RELEASE=&amp;quot;6.2&amp;quot;&amp;gt;&amp;lt;VERSION VALUE=&amp;quot;3&amp;quot;/&amp;gt;&amp;lt;ARCHITECTURE VALUE=&amp;quot;64-bit&amp;quot;/&amp;gt;&amp;lt;NAME VALUE=&amp;quot;Windows 10&amp;quot;/&amp;gt;&amp;lt;ENV_VAR_LIST&amp;gt;&amp;lt;ENV_VAR NAME=&amp;quot;PATH&amp;quot; MAX_LENGTH=&amp;quot;1023&amp;quot; /&amp;gt;&amp;lt;/ENV_VAR_LIST&amp;gt;&amp;lt;/OPERATING_SYSTEM&amp;gt;安装plsql developer 软件 下载地址： https://www.</description>
    </item>
    
    <item>
      <title>MongoDB数据库安装配置</title>
      <link>https://zylhorse.github.io/blog/database/mongo/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Thu, 02 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/database/mongo/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</guid>
      <description>远程访问 修改 /etc/mongod.conf: bindIpAll:true</description>
    </item>
    
    <item>
      <title>MongoDB数据库常用sql语句</title>
      <link>https://zylhorse.github.io/blog/database/mongo/sql%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Thu, 02 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/database/mongo/sql%E8%AF%AD%E5%8F%A5/</guid>
      <description>备份数据库 mongodump -h dbhost -d dbname -o dumpdir
备份数据库表 mongoexport -d dbname -c collectionname -o file --type json/csv -f field参数说明：-d ：数据库名-c ：collection名-o ：输出的文件名--type ： 输出的格式，默认为json-f ：输出的字段，如果-type为csv，则需要加上-f &amp;quot;字段名&amp;quot;还原数据库 mongorestore -h dbhost -d dbname dumppath
还原数据库表 mongoimport -d dbname -c collectionname --file filename --headerline --type json/csv -f field参数说明：-d ：数据库名-c ：collection名--type ：导入的格式默认json-f ：导入的字段名--headerline ：如果导入的格式是csv，则可以使用第一行的标题作为导入的字段--file ：要导入的文件还原数据库表json mongoimport &amp;ndash;db meteor &amp;ndash;collection meetings &amp;ndash;type json &amp;ndash;file /asj/meteor-batch/meetings.</description>
    </item>
    
    <item>
      <title>MySQL索引详解</title>
      <link>https://zylhorse.github.io/blog/database/mysql/</link>
      <pubDate>Sun, 20 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/database/mysql/</guid>
      <description>是什么 为什么 索引可以大大的提高MySQL的检索速度。
Explain key_len 索引长度限制
INNODB引擎的每个索引列长度限制为767字节（bytes），所有组成索引列的长度和不能大于3072字节
MYISM引擎的每个索引列长度限制为1000字节，所有组成索引列的长度和不能大于1000字节
在MySQL5.5版本，引入了innodb_large_prefix，用来禁用大型前缀索引，以便与不支持大索引键前缀的早期版本的InnoDB兼容。 开启innodb_large_prefix可以使单索引的长度限制达到3072字节（但是联合索引总长度限制还是3072字节），禁用时单索引的长度限制为767字节
在MySQL5.5版本与MySQL5.6版本，innodb_large_prefix是默认关闭的。
在MySQL5.7及以上版本，innodb_large_prefix是默认开启的。
在MySQL8.0版本中，innodb_large_prefix已被移除
key_len的长度计算公式：
TINYINT 允许NULL = 1 + 1(NULL)TINYINT 不允许NULL = 1SMALLINT 允许为NULL = 2+1(NULL)SMALLINT 不允许为NULL = 2INT 允许为NULL = 4+1(NULL)INT 不允许为NULL = 4DATETIME 允许为NULL = 8 + 1(NULL)DATETIME 不允许为NULL = 8TIMESTAMP 允许为NULL = 4 + 1(NULL)TIMESTAMP 不允许为NULL = 4VARCHAR(N) 变长字段且允许NULL = N * ( character set：utf8=3,gbk=2,latin1=1)+1(NULL)+2(变长字段)VARCHAR(N) 变长字段且不允许NULL = N * ( character set：utf8=3,gbk=2,latin1=1)+2(变长字段)CHAR(N) 固定字段且允许NULL = N * ( character set：utf8=3,gbk=2,latin1=1)+1(NULL)CHAR(N) 固定字段且不允许NULL = N * ( character set：utf8=3,gbk=2,latin1=1)</description>
    </item>
    
  </channel>
</rss>
