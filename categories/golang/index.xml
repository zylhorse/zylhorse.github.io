<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on zylhorse blog</title>
    <link>https://zylhorse.github.io/categories/golang/</link>
    <description>Recent content in Golang on zylhorse blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 03 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://zylhorse.github.io/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>gRPC-Go快速入门</title>
      <link>https://zylhorse.github.io/blog/golang/grpc/quick-start/</link>
      <pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/grpc/quick-start/</guid>
      <description>准备  Go 最新的三个主版本
安装: https://golang.org/doc/install Protocol Buffer 编译器 protoc
安装: https://www.grpc.io/docs/protoc-installation/ Protocol Buffer Go 插件  安装: $ export GO111MODULE=on # Enable module mode$ go get google.golang.org/protobuf/cmd/protoc-gen-go \google.golang.org/grpc/cmd/protoc-gen-go-grpc 更新环境变量 $ export PATH=&amp;quot;$PATH:$(go env GOPATH)/bin&amp;quot;    </description>
    </item>
    
    <item>
      <title>Protocol Buffer-Go FAQ</title>
      <link>https://zylhorse.github.io/blog/golang/protocol-buffers/faq/</link>
      <pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/protocol-buffers/faq/</guid>
      <description>版本  Versions
 github.com/golang/protobuf和google.golang.org/protobuf有什么区别?
github.com/golang/protobuf 模块是原始的Go protocol buffer API
google.golang.org/protobuf 模块是Go protocol buffer API的更新版本, 旨在更加简洁、易用和安全。 更新API的主要特性是支持反射， 以及将面向用户的API与底层实现分离。
推荐在新代码中使用google.golang.org/protobuf。
github.com/golang/protobuf的v1.4.0版本及更高版本封装了新的实现，并且允许程序逐步的采用新的API。 例如, github.com/golang/protobuf/ptypes中定义的知名类型在新模块中只是简单的别名。因此， google.golang.org/protobuf/types/known/emptypb和github.com/golang/protobuf/ptypes/empty是可以互换使用的。
proto1,proto2,proto3有什么区别? 这些都是protocol buffer语言的修订版。 它不同于protobufs的Go 实现。
 proto3是当前版本。这是该语言最常用的版本。我们鼓励新代码使用proto3。 proto2是旧版本。尽管被proto3取代，但proto2仍然受到完全支持。 proto1是废弃版本。它从未以开源的形式发布。有关proto1的更多信息，请参阅FAQ。  有几种不同的Message类型。我应该用哪个？
 &amp;ldquo;google.golang.org/protobuf/proto&amp;rdquo;.Message是接口类型， 当前版本的protocol buffer编译器生成的所有message都要实现它。操作任意message的方法，如proto.Marshal或proto.Clone， 接收或返回该值。 &amp;ldquo;google.golang.org/protobuf/reflect/protoreflect&amp;rdquo;.Message 是一个描述message反射视图的接口类型。
调用proto.Message的ProtoReflect方法，获取protoreflect.Message。 &amp;ldquo;google.golang.org/protobuf/reflect/protoreflect&amp;rdquo;.ProtoMessage 是&amp;quot;google.golang.org/protobuf/proto&amp;quot;.Message的别名。这两种类型是可以互换的。 &amp;ldquo;github.com/golang/protobuf/proto&amp;rdquo;.Message 是由遗留的Go Protocol Buffer API定义的接口类型。所有生成的message都需要实现该接口，但是该接口没有描述期望从这些message中得到的行为。 新代码应该避免使用这个类型。  常见问题  Common problems
 &amp;ldquo;go install&amp;rdquo;: working directory is not part of a module
你已经设置环境变量GO111MODULE=on，并且在模块目录之外运行go install命令。
设置GO111MODULE=auto，或者取消设置该环境变量。
constant -1 overflows protoimpl.</description>
    </item>
    
    <item>
      <title>Protocol Buffer-Go代码生成</title>
      <link>https://zylhorse.github.io/blog/golang/protocol-buffers/generated/</link>
      <pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/protocol-buffers/generated/</guid>
      <description>生成代码  Go Generated Code
 本章详细描述protocol buffer编译器为协议定义的类型生成对应的Go代码。 proto2和proto3生成代码的任何差异都会突出显示————注意: 文档中描述的差异都在生成的代码中，而不是两个版本都相同的基础API中。 在读这篇文章之前，请先阅读protocol buffer guide
编译器使用  Compiler Invocation
 编译器需要安装插件来生成Go代码。 安装如下:
go install google.golang.org/protobuf/cmd/protoc-gen-go此命令在$GOBIN下安装protoc-gen-go命令。安装之前修改环境变量$GOBIN的值来改变protoc-gen-go安装目录。 为了编译器找到命令，安装目录必须添加到环境变量$PATH中。
 当编译器被调用时设置参数--go_out,会创建输出目录,--go_out指定你想要编译器生成Go输出的目录。 编译器会为每个传入的.proto文件创建源文件,并替换文件的扩展名.proto为.pb.go  .proto文件需要包含go_package选项，用以指定包含生成代码的Go包的完整import路径。
示例:
option go_package = &amp;quot;example.com/foo/bar&amp;quot;;输出文件所在输出目录的子目录，取决于go_package选项和编译器参数:
 默认情况，输出文件被放在以Go包导入路径命名的目录下。例如:
设置上述go_pacakge选项的protos/foo.proto文件的输出文件名是example.com/foo/bar/foo.pb.go 如果命令行参数设置--go_opt=module=$PREFIX,指定目录前缀从输出文件名中删除。例如：
设置上述go_pacakge选项和 --go_opt=module=example.com/foo的protos/foo.proto文件的输出文件名是bar/foo.pb.go 如果命令行参数设置--go_opt=paths=source_relative,输出文件被放在与输入文件相同的相对目录下。例如: 设置上述go_pacakge选项的protos/foo.proto文件的输出文件名是protos/foo.pb.go  当运行以下编译器命令时:
protoc --proto_path=src --go_out=build/gen --go_opt=paths=source_relative src/foo.proto src/bar/baz.proto编译器读取文件src/foo.proto和src/bar/baz.proto。生成两个输出文件: build/gen/foo.pb.go和build/gen/bar/baz.pb.go
编译器会自动生成目录build/gen/bar,但是不会创建目录build或build/gen。这两层目录必须已经存在。
包  Packages
 .proto源文件需要包含go_package选项，指定包含该文件的Go包的完整导入路径。 如果没有指定选项go_package,编译器会猜测一个。 将来的编译器版本，会设置go_package选项为必选的。
生成Go包名为go_package选项定义路径的最后一个元素。 例如:
// The Go package name is &amp;quot;timestamppb&amp;quot;.</description>
    </item>
    
    <item>
      <title>Protocol Buffer-Go基础知识</title>
      <link>https://zylhorse.github.io/blog/golang/protocol-buffers/basics/</link>
      <pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/protocol-buffers/basics/</guid>
      <description>这篇教程讲述了Go程序员使用protocol buffers的基本介绍，这里使用protocol buffers的proto3版本。 逐步的创建简单的示例程序，向你展示怎么去做。
 在.proto文件中定义message格式 使用protocol buffers 编译器 使用Go protocol buffer API读写message  这不是一篇全面的教程，教你怎么在Go中使用protocol buffers。 想要更详细的参考信息， 参见Protocol Buffer Language Guide, the Go API Reference, Go Generated Code Guide, Encoding Reference
为什么使用Protocol Buffers 我们将要演示的示例是一个非常简单的通讯录应用，这个应用可以在文件中读写人们的联系方式。通讯录中的每个人都有名字，ID，email,电话号码。
怎样去序列化和反序列化这些信息？有以下几种方法:
 使用gobs来序列化Go结构化对象。这在特定的Go语言环境中是好的解决方案，但是如果你需要 与其它平台编写的应用共享数据，这种方案就不太好用。 你可以发明专门的方法，将数据项编码到一个单独的字符串－比如将整数4 编码为&amp;quot;12:3:-23:67&amp;quot;。这是个简单而灵活的方法， 尽管它需要编写一次性编码和解析代码，而且解析的运行成本很小。这对于简单数据的编码最有效。 将数据序列化为XML。这个方法是非常有效的，因为XML是可读的，并且很多语言都有实现库。如果你想要和其它应用/项目共享数据， XML是一个很好的选择。但是，总所周知，XML是空间密集型的，并且XML的编解码会给应用带来很大的性能问题。此外操作XML的DOM树比操作 类中的简单字段要复杂的多。  Protocol Buffers 是灵活，高效，自动化的解决方案，刚好解决这个问题。使用Protocol buffer， 你需要编写一个想要存储的数据结构体的.proto描述。随后，protocol buffer 编译器创建一个类， 该类使用高效的二进制格式自动的编解码protocol buffer数据。该类为protocol buffer中的字段提供getter和setter， 并且负责将protocol buffer作为一个单元进行读写。重要的是，protocol buffer格式支持随时间推移扩展格式的思想， 这样代码仍然可以读取用旧格式编码的数据
从哪里查找示例代码 我们的示例是一组命令行应用程序，用于管理使用protocol buffers编码的地址簿数据文件。 add_person_go命令向数据文件添加一个新条目。list_people_go命令解析数据文件并将数据打印到控制台。
你可以在GitHub存储库的examples目录中找到完整的例子。
定义你的协议格式 要创建您的地址簿应用程序，您需要从.proto文件开始。.proto文件中的定义很简单:为要序列化的每个数据结构添加一条消息， 然后为消息中的每个字段指定名称和类型。在我们的示例中，定义消息的.proto文件是addressbook.proto。
.proto文件以包声明开始，这有助于防止不同项目之间的命名冲突
syntax = &amp;quot;proto3&amp;quot;;package tutorial;import &amp;quot;google/protobuf/timestamp.</description>
    </item>
    
    <item>
      <title>Golang代码开发杂计</title>
      <link>https://zylhorse.github.io/blog/golang/misc/</link>
      <pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/misc/</guid>
      <description> string bytes 互转，可以使用unitptr map 会按需扩张，需要内存拷贝和重新hash。 尽量预设定容量空间； defer 会多次函数调用参数复制，缓存等问题。所以除了异常捕获外， 资源释放等可以使用goto closure 闭包 隐式携带上下文环境； 接口调用这种动态绑定的方式性能不如对象赋值的直接调用；call(obj)&amp;amp;call(interface) reflect 性能问题； setFinalizer（延长生命周期，等待第二次gc） 避免内存清理时，对象互相依赖导致循环等待，内存释放不了；  优雅的打印  fmt打印  type Pretty struct {Ugg stringApp string}p1 := Pretty{Ugg: &amp;quot;fly&amp;quot;,App: &amp;quot;bird&amp;quot;,}fmt.Printf(&amp;quot;%+v\n&amp;quot;, p1)fmt.Printf(&amp;quot;%#v\n&amp;quot;, p1)output:{Ugg:fly App:bird}pkg.Pretty{Ugg:&amp;quot;fly&amp;quot;, App:&amp;quot;bird&amp;quot;}</description>
    </item>
    
    <item>
      <title>Golang实现服务优雅的重启</title>
      <link>https://zylhorse.github.io/blog/golang/graceful/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/graceful/</guid>
      <description>https://grisha.org/blog/2014/06/03/graceful-restart-in-golang/</description>
    </item>
    
    <item>
      <title>Golang API实例</title>
      <link>https://zylhorse.github.io/blog/golang/%E9%83%A8%E5%88%86%E5%87%BD%E6%95%B0/</link>
      <pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/%E9%83%A8%E5%88%86%E5%87%BD%E6%95%B0/</guid>
      <description>SetFinalizer   func SetFinalizer(obj interface{}, finalizer interface{})
 参数obj必须是指针类型。 参数finalizer是一个函数，其参数类型是obj的类型，并且没有返回值。 如果不满足以上规则，SetFinalizer会中断程序。    SetFinalizer将obj和finalizer关联， 当gc检测到unreachable对象有关联的 finalizer时，会取消关联关系并在单独的goroutine中执行finalizer。假如没有再次调用 SetFinalizer, gc下次检测对象为unreachable时，将释放对象。
  SetFinalizer(obj, nil) 取消和对象关联的所有finalizer.
  finalizer运行依赖顺序如下: 如果A指向B，两者都关联了finalizer并且标识为unreachable， 则只有A的finalizer执行；一旦A被释放，B的finalizer才可以执行。
  如果*obj大小为0字节，则不保证finalizer会执行。
  不保证包级别init()的对象变量的finalizer会执行。 因为该对象可能是链接器分配的，而不是堆分配。
  在对象被 GC 进程选中并从内存中移除以前，SetFinalizer 都不会执行，即使程序正常结束或者发生错误。 finalizer可以用于避免用户错误使用导致的内存泄露，e.g. os.NewFile,net.newFD() 等注册了对文件描述符的SetFinalizer，用以避免忘记Close()导致的fd泄露。 但是依赖finalizer 来flush内存中的缓冲区例如bufio.Writer是错误的，因为不能保证程序退出时缓冲区会被flush。
  如果对象存在循环引用方法，需要给其添加wrapper， 并将实际类型作为wrapper的匿名字段： ``` type Cache struct{ &amp;hellip; stop chan bool }
 // wrapper定义type CacheWrapper struct{*Cache}func New() *CacheWrapper {cc := &amp;amp;Cache{.</description>
    </item>
    
    <item>
      <title>Golang数据库-数据类型转换</title>
      <link>https://zylhorse.github.io/blog/golang/%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Sat, 23 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>#数据库
问题 字段为空 row.scan 遇到字段为空时， 变量赋值异常：can not convert null=&amp;gt; *string 需要在sql语句中添加： ifnull/coalesce 指定默认空值
添加 sql convert 函数 根据数据类型， 做转换
const (FormatTime = &amp;quot;15:04:05&amp;quot;FormatDate = &amp;quot;2006-01-02&amp;quot;FormatDateTime = &amp;quot;2006-01-02 15:04:05&amp;quot;)var (Err_NilDests = errors.New(&amp;quot;destinations required&amp;quot;)Err_NilPointerDest = errors.New(&amp;quot;destination not support nil pointer&amp;quot;)Err_NotSupportDest = errors.New(&amp;quot;not support destination&amp;quot;))const Invalid_Id = 0func ConvertRow(row *sql.Row, dests ...interface{}) error {destLen := len(dests)if destLen == 0 {return Err_NilDests}refs := make([]interface{}, destLen)for i := range refs {var ref interface{}refs[i] = &amp;amp;ref}err := row.</description>
    </item>
    
    <item>
      <title>Golang-编译指令</title>
      <link>https://zylhorse.github.io/blog/golang/%E7%BC%96%E8%AF%91%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Wed, 05 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/%E7%BC%96%E8%AF%91%E6%8C%87%E4%BB%A4/</guid>
      <description>Command compile go compile, 在命令行的调用为go tool compile。编译一个由命令行指定的多个文件组成的Go包。 执行后生成一个目标文件，文件名是第一个文件的基础名称，后缀是.o。后续该目标文件和其它 目标文件可以联合组成一个归档文件或者直接传递给连接器(go tool link). 如果使用-pack 调用，编译器直接组装成归档文件，绕过生成中间目标文件。
编译生成的文件内容包含由包导出的符号的类型信息和该包导入的其它引用包的符号的类型信息。 因此在编译包P的client时，不需要读取P依赖的文件，只需要读取P的编译输出即可。
Command Line 使用方法:
go tool compile [flags] file...
命令行指定的文件必须是go编码类型文件，且所有文件必须是同一个package的。 所有目标系统和体系结构都使用相同的编译器。环境变量GOOS和GOARCH用来设置期望的目标。
flags
-D path设置本地导入的相对路径,默认为$GOROOT-I dir1 -I dir2查询完$GOROOT/pkg/$GOOS_$GOARCH目录后再到dir1,dir2等目录下搜索导入的package-L在错误消息中显示完整的文件路径-N禁用编译优化-S将汇编程序表打印到标准输出(只包含代码)-S -S将汇编程序表打印到标准输出(包含代码和数据)-V打印编译器版本并退出-asmhdr file将汇编头写入文件-buildid id记录id作为导出元数据中的构建id-blockprofile file将编译的块分析写入文件-c int编译时并发执行。1表示不并发执行(默认1)-complete假设package中没有非go组件-cpuprofile file将编译的CPU分析写入文件-dynlink在共享库中允许引入Go符号(实验性)-e删除错误报告数量的限制(默认10)-goversion string指定runtime需要的`go tool`版本。当runtime版本和指定的版本不匹配时退出。-h当检测到第一个错误时，停止并进行堆栈trace。-importcfg file从指定文件读取import配置文件中需要指出importmap,packagefile-importmap old=new编译时将&amp;quot;old&amp;quot;导入解释为&amp;quot;new&amp;quot;导入importmap参数可以重复，用以添加多个映射。-installsuffix suffix到$GOROOT/pkg/$GOOS_$GOARCH_suffix下检索packages， 而不是 $GOROOT/pkg/$GOOS_$GOARCH.</description>
    </item>
    
    <item>
      <title>Golang跨平台之交叉编译</title>
      <link>https://zylhorse.github.io/blog/golang/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</link>
      <pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</guid>
      <description>概述 交叉编译： 在一个平台生成另一个平台的可执行代码。
golang 交叉编译变量  GOOS:目标系统 GOARCH:目标架构 CGO_ENABLED: 开启cgo  支持的编译平台 查看命令：go tool dist list
   GOOS(目标系统) GOARCH(目标架构)     aix ppc64   android 386   android amd64   android arm   android arm64   darwin 386   darwin amd64   darwin arm   darwin arm64   dragonfly amd64   freebsd 386   freebsd amd64   freebsd arm   illumos amd64   js wasm   linux 386   linux amd64   linux arm   linux arm64   linux mips   linux mips64   linux mips64le   linux mipsle   linux ppc64   linux ppc64le   linux s390x   nacl 386   nacl amd64p32   nacl arm   netbsd 386   netbsd amd64   netbsd arm   netbsd arm64   openbsd 386   openbsd amd64   openbsd arm   openbsd arm64   plan9 386   plan9 amd64   plan9 arm   solaris amd64   windows 386   windows amd64   windows arm    条件编译 golang 采用Tag标记和文件后缀方式实现条件编译；</description>
    </item>
    
    <item>
      <title>Golang线程调度模型</title>
      <link>https://zylhorse.github.io/blog/golang/%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 11 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>CSP模型  communicating sequential process: 通讯顺序进程； 描述多个并发的实体通过共享channel进行通信的并发模型； channel是重要对象，不用关注发送消息的实体，只需要关心实体发送消息时使用的channel； 利用channel 实现两个实体之间的松耦合； go 使用goroutine和chan实现CSP模型  内核线程 内核调度实体（KSE，Kernel Scheduling Entity）即内核线程
 内核线程为操作系统内核最小调度单元； 内核线程创建内存消耗较大，不适合创建太多内核线程； 内核线程调度： 线程挂起前会保存线程上下文到栈空间，再切换到其他可执行线程；线程上下文切换导致cpu开销变大； 内核线程都有固定的内存块（2MB）做栈，用来存储正在被调用或挂起的函数内部变量。  线程调度  线程池： 线程池实现线程复用，避免频繁创建新线程和线程切换，控制了线程数量和内存消耗；但是在资源共享时会发生竞争，降低了并发效率； 异步回调： 在线程阻塞时注册回调方法，不在阻塞当前线程，去处理新的请求。当处理完成后，把结果传给回调方法。回调方法不是在发起请求的线程里。异步回调会造成callback hell， 回调中嵌套回调； 协程： 在协程处理阻塞时， 协程让出cpu执行权，让其他协程执行。 等阻塞结束，在调度等待的协程继续执行；  线程模型  内核级线程模型：用户线程与内核线程KSE是一对一的映射模型；进程创建出来的用户线程与内核线程KSE一一静态绑定； 用户级线程模型： 用户线程与内核线程是多对一的映射模型； 一个进程创建的线程都只和同一个内核线程KSE在运行时动态绑定；线程的调度是在用户层面完成，相较于内核调度不需要让cpu在内核态和用户态切换；缺点： 假设某用户进程上的用户线程因为阻塞调用被cpu中断， 那么进程会被挂起。 混合型线程模型：用户线程与内核线程KSE是多对多的映射模型，一个进程与多个内核线程KSE关联，于是进程中的多个线程可以绑定不同的内核线程KSE。与内核级线程模型不同的是混合型线程模型与内核线程KSE是动态绑定的。当某个KSE绑定的线程阻塞被内核调度出cpu时， 其关联的进程中其余用户线程可以重新与其他KSE绑定运行。实现用户调度器实现用户线程到KSE的调度，内核调度器实现KSE到cpu的调度；  goroutine和Go Scheduler  golang中 goroutine是独立的执行单元。goroutine栈采用动态扩容，初始仅为2KB（最大1GB-64位机器，256M-32位机器）。 goroutine完全由golang自己的调度器 Go Scheduler调度。GC还会定期的将不使用的内存回收，收缩栈空间。  MPG  G: 表示Goroutine， 每个Goroutine对应一个G结构体。G存储goroutine的运行堆栈、状态及函数。G并非执行体，每个G绑定到P才能执行。 P：表示Processer，逻辑处理器。对于G来说P相当于CPU。G只有绑定到P上才会被调度。对M来说P提供了相关的执行环境（context）、内存分配（memcache)、任务队列（G）。 P的数量决定最大可并行G的数量。　P的数量由用户设置的GOMAXPROCS决定。最大位256. M:表示Machine，内核线程抽象，代表真正执行计算的资源。在绑定有效的P后，进入schedule循环。 schedule 循环机制大致从Global队列、P的local队列以及wait队列中获取G，切换到G的执行堆栈上并执行G，调用goexit做清理工作并回到M， 如此反复。M并不保留G状态，这是G可以跨M调度的基础。M数量不确定，由GO RunTime调整， 防止创建太多系统线程，最大为10000.</description>
    </item>
    
    <item>
      <title>Golang源码阅读-内存管理</title>
      <link>https://zylhorse.github.io/blog/golang/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
      <pubDate>Thu, 26 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
      <description>内存管理 内存模型 保证共享内存的可见性、有序性、原子性，内存模型定义了共享内存系统中多线程读写操作的规范。
happens before  go中也定义了happens before以及各种发生happens before关系的操作。 在单个goroutine中，读取和写入必须按照程序指定的顺序执行 在单goroutine的程序中，Happens-Before的顺序就是程序中表达的顺序 当多个goroutine同时访问变量v时，我们必须使用同步事件(synchronization events)来满足Happends-Before条件以确保读操作(r)观察到期望的写操作(w)的值。  init 函数 程序初始化在单个goroutine中运行，但是goroutine可能会创建其他同时运行的goroutine； 如： 在package p中import package q， 那么q的init函数happens-before p的init函数执行。起始的main.main函数在所有包的init函数之后执行；
goroutine  creation： go 关键字声明一个goroutine的动作happens-before goroutine 执行； destruction： goroutine退出时，并不能保证其happens-before其他任何事件；  channel  buffered channel  1. 一个容量为C的channel的第k个接收操作happens-before第（k+C）个发送操作；2. 发送操作会使channel复制发送的元素。如果channel缓冲已满而无法复制，则阻塞发送操作。复制的目的地址有两种：当channel为空且有接收方等待时，它会是最早等待的接收方的地址，否则会是通道持有的缓冲中的地址；3. 在channel完全复制一个元素值之前，任何goroutine都不可能从channel接收到元素值的副本；unbuffered channel  1. 对一个channel的发送操作happens-before相应的channel的接受操作；2. 对一个channel的接受操作happens-before相应的channel的发送操作完成sync lock 任何sync.Mutex或sync.RWMutex 变量（l），定义 n &amp;lt; m， 第n次 l.Unlock() happens-before 第m次l.lock()调用返回。
sync once once.Do(f)中的f() happens-before 任何多个once.Do(f)调用的返回，且f()有且只有一次调用。
automic  内存分配 概述  Go内置运行时(runtime), 不同于传统的内存分配， Go 启动时，先从操作系统申请一大块内存(虚拟内存)，进行自主管理，减少系统调用 Go运行时内存分配算法使用Google为C语言开发的TCMalloc算法(全称： Thread-Caching Malloc)， 细分内存，多级管理，降低锁粒度 Go对象回收时，并没有将其真正释放，只是放回预先分配的大块内存中，以便复用。只有当自主内存闲置太多时，才会尝试归还部分内存给操作系统，降低开销  内存分配算法 Go运行时内存分配算法使用Google为C语言开发的TCMalloc算法(全称： Thread-Caching Malloc).</description>
    </item>
    
    <item>
      <title>Golang源码阅读-Context</title>
      <link>https://zylhorse.github.io/blog/golang/context/</link>
      <pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/context/</guid>
      <description>context 数据结构 type Context interface {// Done return a channel that is closed when this context is canceld or timeoutDone() &amp;lt;- chan struct{}// Err indicates why this context is canceled, after the done channel is closedErr() error // Deadline returns the time when this context will be canceld, if anyDeadline() (deadline time.Time, ok bool)// Value returns the value associated with key or nil if none.</description>
    </item>
    
    <item>
      <title>Golang源码阅读-sync.map</title>
      <link>https://zylhorse.github.io/blog/golang/sync.map/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/sync.map/</guid>
      <description>sync.map  runtime中go的基本类型 map 不支持并发的读写， 会报错：fatal error: concurrent map writes 为了支持并发， 我们直接对整个map加读写锁，相当低效， 因此官方实现了sync.map  高效的原理和思路  用空间换时间，降低锁的区域 用两个map来存储数据  虽然两个map存储有冗余，但是底层数据类型都是指针，所以冗余的空间还是有限的。    总结  如果对map的读操作大于写操作， 则sync.map能大大提升性能； 写操作需要加锁， 且操作两个map 写操作也会触发， 两个map之间的切换。  源码解析 基础结构  Map type Map struct {mu Mutex // 互斥锁，用于锁定dirty map， 写锁read atomic.Value // 优先读， 支持原子操作。相当于dirty的缓存dirty map[interface{}]*entry // dirty保存最新写入数据， 允许读写misses int // 记录在read中读取不到数据，去dirty中查询的次数} readonly type readOnly struct {m map[interface{}]*entryamended bool // 当key不在read中而在dirty中时， 为true} entry type entry struct {//可见value是个指针类型，虽然read和dirty存在冗余情况（amended=false），但是由于是指针类型，存储的空间应该不是问题p unsafe.</description>
    </item>
    
    <item>
      <title>Golang源码阅读-sync.Mutex</title>
      <link>https://zylhorse.github.io/blog/golang/sync.mutex/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/sync.mutex/</guid>
      <description>概述 Go的互斥锁有两种模式: 正常模式和饥饿模式。
  正常模式 正常模式，等待队列按FIFO顺序排序，但是等待队列中被唤醒的G并不拥有互斥锁， 而是与新来的G竞争所有权。新来的G有一个优势-它已经再CPU上运行并且可能有很多， 因此等待队列中被唤醒的G可能会输掉竞争。这种情况下先来的G排在等待队列的前面。 如果等待队列中的G获取互斥锁失败超过1ms，它会将互斥锁切换为饥饿模式。
  饥饿模式
 饥饿模式下，互斥锁的所有权直接从解锁的G传递给等待队列队首的G。 新来的G不要试图获取互斥锁，即使它看起来是要解锁，并且不要试图自旋。 将新来的G放到等待队列的队尾。 如果等待队列中的G获取互斥锁的所有权并且有以下情况: 1)G是等待队列中的最后一个， 2) G的等待市场小于1ms， 它将互斥锁切换为正常模式。    正常模式有很好的性能表现，因为G可以连续多次的获取互斥锁，即使存在阻塞的等待者。
饥饿模式可以有效的预防尾延迟的情况。
Mutex // Mutex是互斥锁// Mutex的0值是一个未锁定的mutex。//// Mutex 不允许复制type Mutex struct {state int32sema uint32}// Locker表示可以被锁定和解锁的对象// Mutex 实现该接口type Locker interface {Lock()Unlock()}// Mutex 状态标志常量const (mutexLocked = 1 &amp;lt;&amp;lt; iota // mutex is lockedmutexWokenmutexStarvingmutexWaiterShift = iotastarvationThresholdNs = 1e6)Lock // Lock 锁定m// 如果m已经锁定，调用Lock的goroutine会阻塞，直到m被解锁。func (m *Mutex) Lock() {// 快通道: 抢占未锁定的mutex// 将mutex.</description>
    </item>
    
    <item>
      <title>Golang源码阅读-sync.pool</title>
      <link>https://zylhorse.github.io/blog/golang/sync.pool/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/sync.pool/</guid>
      <description>基本概述 Pool定义在package sync中.
Pool是一组临时对象的集合， 可以用于保存和检索临时对象。
存储在Pool中的任何对象，都可以在任何时间被自动删除，而不需要通知。如果当前Pool持有对象的唯一引用， 那么该对象可能会被释放。
Pool是多协程并发使用安全的。
Pool在第一次使用后，不能再被拷贝赋值。
Pool作用 Pool设计用来缓存已分配内存但未使用的对象，用于后续的复用。用来减轻gc的压力。 换言之，Pool使得构建高效、线程安全的缓存变得简单。但是，它并不适用所有的缓存情况。 Pool只是提供了一种在多客户机之间分摊分配开销的方法。
使用场景 Pool在标准库中的使用示例是在package fmt中， 维护一个临时输出缓冲区的动态大小存储区。 当goroutine打印活跃时扩容缓冲区，打印沉寂时收缩缓冲区。
另一方面，缓存列表维护一组短命的临时对象的场景不适合使用Pool，因为这种情况不能很好的 分摊分配开销。让这些对象实现他们自己的缓存列表会更有效。
数据结构 type Pool struct {noCopy noCopy // 第一次使用后不允许被复制local unsafe.Pointer // 固定大小的per-P pool, 实际类型是[P]poolLocallocalSize uintptr // local的大小victim unsafe.Pointer // 上一个gc周期local的备份victimSize uintptr // victim的大小// `New` 是可选项，指定函数用以在`Get`返回`nil`时生成一个值。 // 它不能与`Get`调用同时更改New func() interface{}} local大小为什么是GOMAXPROCS？
优化G对local的竞争。G绑定到P上只能操作对应的local[PID],这样设计避免了多个G操作Pool时需要加锁。  type poolLocal struct {poolLocalInternal// Prevents false sharing on widespread platforms with// 128 mod (cache line size) = 0 .</description>
    </item>
    
    <item>
      <title>Golang doc使用细则</title>
      <link>https://zylhorse.github.io/blog/golang/godoc/</link>
      <pubDate>Sat, 23 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/godoc/</guid>
      <description>简介 go doc和godoc 在golang 1.13版本被移除，可手动安装go get golang.org/x/tools/cmd/godoc
go doc GO 命令行工具， 打印和显示文档 打印内容：
package pkgxxx // import &amp;quot;project/pkgxxx&amp;quot;FUNCTIONSfunc FuncXxx(n int) stringTYPEStype TXxx struct {Val int}go doc Flags -all: 显示package的所有文档
-c: 区分大小写，默认不区分
-cmd: 打印文档包含package main,默认是不包含的
-u: 打印文档包含不能导出(首字母小写)的FUNCTIONS和TYPES文档,默认是不包含的
-src: 显示源代码
-short: 单行显示
go doc参数  go doc: 输出当前目录下package的文档说明 go doc &amp;lt;pkg&amp;gt;: 输出指定package的文档说明  示例： go doc http   go doc &amp;lt;sym&amp;gt;[.&amp;lt;methodOrField&amp;gt;]: 输出指定package的指定FUNCTIONS或TYPES的文档说明  示例: go doc http.</description>
    </item>
    
    <item>
      <title>Golang swagger应用</title>
      <link>https://zylhorse.github.io/blog/golang/goswagger/</link>
      <pubDate>Sat, 23 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/goswagger/</guid>
      <description>简介 goswagger包含了Swagger 2.0的golang实现。
swag方式 参考: README
swagger 采用源码安装方式：
git clone https://github.com/go-swagger/go-swaggergo install ./go-swagger/cmd/swagger参考: SPEC</description>
    </item>
    
    <item>
      <title>Golang代码诊断工具-Tracing</title>
      <link>https://zylhorse.github.io/blog/golang/tracing/</link>
      <pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/tracing/</guid>
      <description>Tracing  Tracing通过检测代码来分析一个调用链在整个生命周期中的开销。 Go提供了一个执行追踪器来追踪一个时间间隔内的运行时事件  Tracing作用  测量和分析Go P中程序的开销 精确测量某个调用在调用链中的开销 通过追踪数据来找出利用率和性能瓶颈  分布式Tracing  在单进程模式，收集诊断数据相对容易。所有的模块都在一个进程，并且通过共享公共资源来报告日志、错误和其他诊断信息 当系统扩展成分布式后，追踪一个完整的调用(从前端web服务器及其后端所有调用，直到响应返回给用户)将会非常困难 当分布式系统需要分析用户请求和RPC的性能时，就需要用到分布式Tracing Go为需要追踪的系统和后台无关的系统提供了大量的分布式Tracing库  分布式Tracing作用   测量和分析在大型系统中程序的开销
  追踪用户请求周期中的所有RPC调用，并且发现线上服务的集成问题
  通过追踪数据来找出系统的利用率和性能瓶颈
  Go 没有提供自动拦截函数调用并创建追踪范围的方法，需要手动的注入代码来创建/结束/注释追踪 可以使用context.Context传递追踪标识和标签 Go可以Tracing部分内部库或运行时的底层事件，eg: httptrace.ClientTrace     httptrace net/http/httptrace包提供追踪单个HTTP请求过程中事件的机制， 事件包含：
 Connection creation Connection reuse DNS lookups Writing the request to the wire Reading the response  使用实例：
req, _ := http.NewRequest(&amp;quot;GET&amp;quot;, &amp;quot;http://example.com&amp;quot;, nil)trace := &amp;amp;httptrace.ClientTrace{DNSDone: func(dnsInfo httptrace.</description>
    </item>
    
    <item>
      <title>Golang代码诊断工具-Diagnostics</title>
      <link>https://zylhorse.github.io/blog/golang/diagnostics/</link>
      <pubDate>Fri, 11 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/diagnostics/</guid>
      <description>Diagnostics Go生态系统提供了大量的接口套件和工具来诊断Go程序的业务和性能问题
 这些工具之间会互相干扰，因此需要单独使用工具来获取精确数据
   Profiling: 分析Go程序的复杂性和成本，例如内存占用和函数调用，来确定Go程序的开销。
详情参考: Golang代码诊断工具-Profiling
  Tracing
 Tracing检测代码用于分析一个调用或用户请求在整个生命周期中的执行时间; Tracing提供每个组件影响整个系统执行时间的概览； Tracing可以跨越多个Go进程
详情参考: Golang代码诊断工具-Tracing    Debugging Debugging允许暂停一个Go程序并检测它的执行，验证程序的状态和流程
工具:
 Delve GDB    Runtime statistics and events
 收集和分析运行时状态和事件提供Go程序运行状况的高级概览； 指标的变化帮助我们识别吞吐量、利用率和性能的变化。    </description>
    </item>
    
    <item>
      <title>Golang代码诊断工具-Profiling</title>
      <link>https://zylhorse.github.io/blog/golang/profiling/</link>
      <pubDate>Fri, 11 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/profiling/</guid>
      <description>概述 Profiling对于识别昂贵的和经常调用的代码段非常有用。
Go 运行时以pprof工具可以识别的格式提供概要数据，这些概要数据可以通过go test测试或引入net/http/pprof时被收集。
概要数据内容 runtime/pprof包，以pprof visualization tool可以识别的格式生成概要数据
数据包含以下内容：
 cpu: 报告程序在消耗CPU周期时将时间花费在何处(与睡眠和等待I/O相反) heap: 报告内存分配; 用来监视当前和历史内存使用情况，并且检查内存泄漏 threadcreate: 报告程序中哪些部分导致创建新的系统线程(OS threads) goroutine: 报告所有goroutine的堆栈跟踪 block: 报告哪些goroutine阻塞等待(包括定时器)。默认关闭该项，使用runtime.SetBlockProfileRate来启用。 mutex: 报告琐竞争。当你认为由于锁竞争导致CPU没有充分利用时，开启该项。 默认关闭该项，使用runtime.SetMutexProfileFraction来启用。  收集概要数据 Benchmarks数据 go test 内置了对Benchmarks进行Profiling的支持。
以下示例：go test -cpuprofile cpu.prof -memprofile mem.prof -bench .
 执行当前目录下的benchmarks并将CPU和memory概要数据写入到文件中：
 应用程序数据   生成概要文件
 var cpuprofile = flag.String(&amp;quot;cpuprofile&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;write cpu profile to `file`&amp;quot;)var memprofile = flag.String(&amp;quot;memprofile&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;write memory profile to `file`&amp;quot;)func main() {flag.</description>
    </item>
    
    <item>
      <title>Golang进程管理工具</title>
      <link>https://zylhorse.github.io/blog/golang/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</guid>
      <description>简介 Go 生态系统提供了一套API和工具来检测程序的逻辑和性能问题。本章总结了可用的工具，并帮助用户在遇到问题时，选择正确的工具。
gops gops: Golang进程管理工具，支持远程调用
 安装：go get -u github.com/google/gops 项目启动代理： package mainimport (&amp;quot;log&amp;quot;&amp;quot;time&amp;quot;&amp;quot;github.com/google/gops/agent&amp;quot;)func main() {if err := agent.Listen(agent.Options{}); err != nil {log.Fatal(err)}time.Sleep(time.Hour)} agent.Options{} type Options struct {// gops agent 监听地址// 格式： host:portAddr string// 配置文件保存目录// 保存内容： gops pid，filename， port，contentConfigDir string// 设置是否自动清理资源// true: 进程接收到终端信号后，会自动清理// false：进程关闭前用户需要调用 CloseShutdownCleanup bool}   命令行使用：  打印所有Go进程： $ gopspid ppid 进程名 go 版本 关联进程的位置983 980 docc * go1.</description>
    </item>
    
    <item>
      <title>Golang单元测试</title>
      <link>https://zylhorse.github.io/blog/golang/testing/</link>
      <pubDate>Mon, 23 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/testing/</guid>
      <description>简介  Package testing为Go packages提供自动化测试支持。 使用 go test 命令来启动测试 编写新的测试套件，需要创建以_test.go结尾的新文件  admin.go的测试文件，需要在当前目录新建测试文件admin_test.go   测试方法func TestXxx(*testing.T)  测试方法需要以Test开头 Xxx方法必须以大写字母开头 方法参数必须是：t *testing.T    关键词 tests: 常规测试
beanchmarks: 基准测试
examples : 样例测试
sub: 子模式
Benchmarks(基准测试) func BenchmarkXxx(b *testing.B)
 benchmarks方法需要以Benchmark开头 benchmarks方法，在go test命令添加-bench时才执行 benchmarks中，需要目标代码被执行b.N次 func BenchmarkXxx(b *testing.B) {for i := 0; i &amp;lt; b.N; i++ {Xxx()}} benchmarks在执行过程中会调整b.N，直到benchmarks函数持续足够长的时间，可以可靠的计时为止 执行结果： BenchmarkXxx 68453040	17.8 ns/op  单次执行目标代码耗时17.8ns,目标代码执行68453040次   benchmarks目标代码执行前，如果有比较耗时的准备操作，benchmarks的时间可以重置 func BenchmarkXxx(b *testing.</description>
    </item>
    
    <item>
      <title>Golang源码阅读-defer</title>
      <link>https://zylhorse.github.io/blog/golang/defer/</link>
      <pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/defer/</guid>
      <description>defer 逻辑  defer代码块会在函数调用链表中增加一个函数调用，该函数调用是在return之后； defer的执行顺序是先进后出； defer表达式中变量的值在defer表达式被定义时就已经明确； defer可以获取有名返回值； goroutine 控制结构中，有张表记录所有defer；  defer 作用 defer表达式通常用来清理和释放资源
defer 性能  defer 性能在1.13版本之前不高 defer 会涉及到内存、缓存、多次调用，所以有一定性能问题； 使用注意： 除了需要异常捕获，必须使用defer；其他资源回收，可以在判断失败后，使用goto跳转到资源回收的代码； 对于竞争资源，在使用完成后立刻进行释放，这样才可以最优的使用竞争资源。 1.14后性能优化增加开放编码（Open-coded）defer类型,是普通函数调用的log10； 减少defer链表长度(测试: 不要超出8个， 超出8个后性能骤降)。这种场景可以拆分增加函数调用来解决。  defer原理 每一个defer在编译的时候就会转换成deferproc，编译器会在函数return之前插入deferreturn。
 调用deferproc，这里会进行参数拷贝； 执行deferreturn，这里会提取信息；  defer goroutine defer 会被添加到G _defer链表的首部，所以defer是一个后进先出的链表； G 退出时会遍历G上的defer 链表。
defer 源码 type _defer struct {siz int32 //参数大小started bool // defer是否被调用过的标识sp uintptr // sp at time of deferpc uintptrfn *funcval // defer 后面跟的function_panic *_panic // panic that is running deferlink *_defer // 链表结构}</description>
    </item>
    
    <item>
      <title>Golang源码阅读-select</title>
      <link>https://zylhorse.github.io/blog/golang/select/</link>
      <pubDate>Fri, 23 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/select/</guid>
      <description>描述 select就是用来监听和channel有关的IO操作，当 IO 操作发生时，触发相应的动作。
执行步骤  构建select对象：  type hselect struct {tcase unit16 // total count of scase[]ncase unit16 // currently field scase[]pollorder *unit16 // case poll orderlockorder *uint16 // channel lock orderscase [1]scase //one per scase }注册case  所有channel表达式都会被求值、所有被发送的表达式都会被求值。求值顺序：自上而下、从左到右.1. 注册写chan case2. 注册读chan case3. 注册default case执行select  1. 对case洗牌，排序 获取locking order2. 对lockorder里的元素进行枷锁3. 顺序遍历case，等待某个case 被解锁唤醒4. 将未唤醒的case 踢出队列5. 对lockorder里的元素进行解锁释放select  问题  select default 谨慎操作； default 阻塞导致select 不退出； 当chan被触发时，select随机挑选执行；  </description>
    </item>
    
    <item>
      <title>Golang源码阅读-chan</title>
      <link>https://zylhorse.github.io/blog/golang/chan/</link>
      <pubDate>Sun, 11 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/chan/</guid>
      <description>描述 channel 是golang实现CSP理念的重点。channel实现一个进程内不同协程之间的通信方式。
结构体 channel 实际上是一个环形队列，实际的队列空间就是在这个channel结构体之后申请的空间。
type hchan struct {qcount uint // 缓冲队列中的元素计数器dataqsiz uint // 缓冲队列，=make(chan T, x)中的xbuf unsafe.Pointer // 缓冲队列，数组类型elemsize uint16 // 元素大小，单位为字节closed uint32 // chan关闭标记elemtype *_type // 元素类型sendx uint // 待发送元素在缓冲器中的索引recvx uint // 待接收元素在缓冲器中的索引recvq waitq // 阻塞等待读channel的G队列sendq waitq // 阻塞等待写channel的G队列lock mutex // 互斥锁} elem 大小不能超过65536个字节，超过会抛异常  特性  当chan缓冲中还有数据时，关闭chan后，接受者不会立刻接收到chan的关闭信号， 而是等缓冲中所有的数据被全部读取后接受者才会收到chan的关闭信号； 没有被初始化的chan在调用发送或者接收的时候会被阻塞 当chan被close之后不能被写入，但是可以被读取； chan不能被重复close，chan可以不被close；可以被系统自动回收；  make chan  新建channel时调用func makechan(t *chantype, size int) *hchan函数</description>
    </item>
    
    <item>
      <title>Golang源码阅读-slice</title>
      <link>https://zylhorse.github.io/blog/golang/slice/</link>
      <pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/slice/</guid>
      <description>数组(array) golang 中 array 在函数传参中是值传递， 修改不影响原数组；
切片(slice)  切片数据结构很简单， 对底层数组进行了抽象，并提供相关操作方法； 切片数据结构包含三个字段： 数组指针， 切片长度， 切片容量 切片只能访问切片长度内的元素， 容量只是为了切片后续扩容使用  声明 var ss []int初始化  make 不允许创建len小于cap的切片  指定len和cap ss := make([]int, 5, 10) 指定len ss := make([]int, 5)   字面量  全量创建并初始化切片： ss := []int{1, 2, 3, 3} 使用索引创建并初始化： ss := []int{9: 1}   创建数组的引用 arr := [5]int{}ss := arr[:] 通过切片创建新的切片  默认容量 s := []int{1,2,3,4,5}// ss := s[i:j] // ss = []int{i, .</description>
    </item>
    
    <item>
      <title>Golang源码阅读-map</title>
      <link>https://zylhorse.github.io/blog/golang/map/</link>
      <pubDate>Mon, 08 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/map/</guid>
      <description>map 声明 var m map[string]stringmap声明默认值是nil， 此时取值，返回的是value对应类型的零值
初始化 // 声明之后必须初始化，才能使用m = make(map[string]int)m = map[string]int{}// 声明并初始化m = make(map[string]int, 10)m = map[string]int{&amp;quot;x&amp;quot;:1}向未初始化的map赋值引起： panic: assignment to entry in nil map
key/value 限制  key 一定是可以比较的类型（支持==操作），如果是非法的key会报invalid map key type value可以是任意类型  遍历  map 本身是无序的 在iterate 整个map时， 使用delete 是安全的。这里和C++ 不一样， C++ 不能再迭代的时候删除元素，会导致map的红黑树结构发生变化  函数传参 golang中没有引用传递， 均为值传递。意味参数是一种数据拷贝。
map 本身是引用类型，作为形参或返回值时，传递的是地址的拷贝。
扩容时也不会改变这个地址。
map 基础数据结构 map实现的底层结构是hmap
// A header for a Go map.</description>
    </item>
    
    <item>
      <title>Golang 代码规范</title>
      <link>https://zylhorse.github.io/blog/golang/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</link>
      <pubDate>Sun, 07 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</guid>
      <description>gofmt工具 gofmt 格式化Go程序。使用tabs进行缩进，blanks进行对齐。
gofmt 参数 gofmt [flags] [path...]
 -cpuprofile: 指定打印cpu profile文件路径 -d: 打印gofmt前后文件差异，并不格式化重写源文件 -e: 打印gofmt出现的错误,并不格式化重写源文件 -l: 打印不符合gofmt的文件列表,并不格式化重写源文件 -r: 设置gofmt重写规则 -s: 简化代码  源: tt := []int{1, 2, 3, 4, 5, 6}tt = tt[3:len(tt)] 目标: tt := []int{1, 2, 3, 4, 5, 6}tt = tt[3:]   -w: 将gofmt结果写入源文件，而不是stdout  命名 Go中命名具有语义性， 命名在包外的可见性取决于首字母的大小写；
  目录
 目录名小写 允许中划线-,但是不要出现在头尾    文件
 文件名小写 允许下划线_,但是不要出现在头尾 可以结合系统平台、CPU架构、版本号等 eg: defs_linux_amd64.</description>
    </item>
    
    <item>
      <title>golang-tags及扩展使用</title>
      <link>https://zylhorse.github.io/blog/golang/gotag/</link>
      <pubDate>Sun, 23 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/gotag/</guid>
      <description></description>
    </item>
    
    <item>
      <title>golang常用网址</title>
      <link>https://zylhorse.github.io/blog/golang/%E5%B8%B8%E7%94%A8%E7%BD%91%E5%9D%80/</link>
      <pubDate>Sun, 23 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/%E5%B8%B8%E7%94%A8%E7%BD%91%E5%9D%80/</guid>
      <description>官网  golang官方地址: https://golang.org/ golang在线运行的互动小程序: https://tour.golang.org golang CMD: https://golang.org/cmd golang Release: https://golang.org/doc/devel/release.html golang Issue: https://github.com/golang/go/issues golang wiki: https://github.com/golang/go/wiki/ golang 论坛: https://groups.google.com/g/golang-announce golang asesome-go: https://github.com/avelino/awesome-go golang trending: https://github.com/trending/go?since=daily  学习地址  The Go Programming Language 英文原版地址: http://www.gopl.io/ The Go Programming Language中文github地址: https://github.com/golang-china/gopl-zh  </description>
    </item>
    
    <item>
      <title>Golang源码阅读-interface</title>
      <link>https://zylhorse.github.io/blog/golang/interface/</link>
      <pubDate>Sat, 22 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/interface/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Golang-Effective Go</title>
      <link>https://zylhorse.github.io/blog/golang/effective_go/</link>
      <pubDate>Thu, 23 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/effective_go/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Golang-package-unsafe</title>
      <link>https://zylhorse.github.io/blog/golang/pointer/</link>
      <pubDate>Thu, 23 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/pointer/</guid>
      <description>本文主要分析unsafe.Pointer和uintptr的主要工作和区别，以及我们在项目中的使用场景
unsafe.Pointer
unsafe包 unsafe包主要包含绕过Go程序类型安全的操作。
包中引入unsafe可能是不可移植的，并且不受Go 1兼容性指南的保护。
func Alignof
func Alignof(x ArbitraryType) uintptr
Alignof接受任意类型的表达式x，并且返回变量v(假设的)需要的内存对齐字节数。它的值m是v的地址对m取余为0的最大值。 它与reflect.TypeOf(x).Align()返回值相同。
特定情况下，如果变量s是struct类型，并且f是struct中的field，那么Alignof(s.f)返回f需要的内存对齐字节数。 这种情况下它与reflect.TypeOf(s.f).FieldAlign()返回值相同。
Alignof的返回值是Go常量。
func Offsetof
func Offsetof(x ArbitraryType) uintptr
Offsetof返回x表示的field在struct中的偏移量,x必须是structValue.field类型。换言之,它返回struct开始和field开始之间的字节数。
Offset的返回值是Go常量。
func Sizeof
func Sizeof(x ArbitraryType) uintptr
接受任意类型的表达式x，并且返回变量v(假设的)的内存大小,单位是字节。它的值不包含任何可能被x引用的内存。
举个例子,如果x是一个slice，sizeof返回slice的内存大小，不包含slice中引用的内存大小。
Sizeof的返回值是Go常量。
type ArbitraryType type ArbitraryType int
ArbitraryType这里仅用于文档说明，它不属于unsafe包。它表示任意类型的Go表达式
type Pointer
type Pointer *ArbitraryTypePointer表示指向任意类型的指针。type Pointer有四种指定的操作可用，其它不可用：
 任意类型的指针可以转换为Pointer Pointer可以转换为任意类型的指针 uintptr可以转换为Pointer Pointer可以转换为uintptr Pointer允许程序使类型检测失效，可以读写任意的内存。因此使用时要小心。  以下使用Pointer的模式是有效的。未使用以下模式的代码可能是无效的，可能将来也是无效的。
即使是有效的模式也有重要的注意事项。
执行go vet可以帮助检测不符合使用Pointer模式的地方，但是go vet的沉默不能保证代码是有效的。
(1) 将*T1转换为指向*T2的指针 前提是T2不大于T1，并且两者共享相同的内存布局，这种转换允许讲一种类型的数据转换为另一种类型的数据。
一项示例是math.Float64bits的实现:
func Float64bits(f float64) uint64 {return *(*uint64)(unsafe.Pointer(&amp;amp;f))(2) 将Pointer转换为uintptr(但是不能再转换为Pointer)</description>
    </item>
    
    <item>
      <title>Golang代码版本管理工具-go mod</title>
      <link>https://zylhorse.github.io/blog/golang/gomodule/</link>
      <pubDate>Thu, 11 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/gomodule/</guid>
      <description>概述 golang 模块管理工具，在Go 1.11版本中添加
配置环境变量 # Enable the go modules featureexport GO111MODULE=on# Set the GOPROXY environment variableexport GOPROXY=https://goproxy.io</description>
    </item>
    
    <item>
      <title>Golang和c语言互相调用的机制-cgo</title>
      <link>https://zylhorse.github.io/blog/golang/cgo/</link>
      <pubDate>Wed, 27 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/cgo/</guid>
      <description>参考: https://github.com/golang/go/wiki/cgo
概述 CGO模块提供了golang和c语言互相调用的机制。某些第三方库只有c/c++实现且自己实现成本较高。
window 额外配置  安装mingw-get， 配置环境变量 安装gcc： mingw-get install gcc  golang与c基本类型转换 golang 调用c函数，需要将golang数据类型通过cgo进行转换
   C语言类型 CGO类型 Go语言类型     char C.char byte   singed char C.schar int8   unsigned char C.uchar uint8   short C.short int16   unsigned short C.ushort uint16   int C.int int32   unsigned int C.uint uint32   long C.long int32   unsigned long C.</description>
    </item>
    
    <item>
      <title>Golang validator应用</title>
      <link>https://zylhorse.github.io/blog/golang/validator/</link>
      <pubDate>Mon, 23 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/golang/validator/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
