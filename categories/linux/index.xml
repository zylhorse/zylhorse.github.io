<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on zylhorse blog</title>
    <link>https://zylhorse.github.io/categories/linux/</link>
    <description>Recent content in Linux on zylhorse blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 07 Jun 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://zylhorse.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux系统下服务监控和报警解决方案</title>
      <link>https://zylhorse.github.io/blog/linux/%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7%E5%8F%8A%E5%91%8A%E8%AD%A6/</link>
      <pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/linux/%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7%E5%8F%8A%E5%91%8A%E8%AD%A6/</guid>
      <description>zabbix prometheus </description>
    </item>
    
    <item>
      <title>Linux TCP/IP内核参数调优</title>
      <link>https://zylhorse.github.io/blog/linux/core-tcp-ip/</link>
      <pubDate>Wed, 11 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/linux/core-tcp-ip/</guid>
      <description>Sysctl命令 用来配置与查看在/proc/sys目录中的内核参数。如果想使参数长期保存，可以通过编辑/etc/sysctl.conf文件来实现。
命令格式：
 sysctl [-n] [-e] -w variable=valuesysctl [-n] [-e] -p (default /etc/sysctl.conf)sysctl [-n] [-e] –a常用参数的意义：
 -w 临时改变某个指定参数的值，如: $ sysctl -w net.ipv4.ip_forward=1 -a 显示所有的系统参数 -p 从指定的文件加载系统参数,默认从/etc/sysctl.conf 文件中加载，如： echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward sysctl -w net.ipv4.ip_forward=1   以上两种方法都可能立即开启路由功能，但如果系统重启，或执行了$ service network restart命令，所设置的值即会丢失。
如果想永久保留配置，可以修改/etc/sysctl.conf文件，将 net.ipv4.ip_forward=0改为net.ipv4.ip_forward=1
内核参数调整 内核参数调整有两种方式
  修改/proc下内核参数文件内容，不能使用编辑器来修改内核参数文件，理由是由于内核随时可能更改这些文件中的任意一个， 另外，这些内核参数文件都是虚拟文件，实际中不存在，因此不能使用编辑器进行编辑，而是使用echo命令，然后从命令行将输出重定向至 /proc 下所选定的文件中。 如：将 timeout_timewait 参数设置为30秒：$ echo 30 &amp;gt; /proc/sys/net/ipv4/tcp_fin_timeout。
参数修改后立即生效，但是重启系统后，该参数又恢复成默认值。因此，想永久更改内核参数，需要修改/etc/sysctl.conf文件。
  修改/etc/sysctl.conf文件。检查sysctl.conf文件，如果已经包含需要修改的参数，则修改该参数的值,如果没有需要修改的参数， 在sysctl.conf文件中添加该参数。如：net.ipv4.tcp_fin_timeout=30。保存退出后，可以重启机器使参数生效，如果想使参数马上生效， 也可以执行如下命令：$ sysctl -p。</description>
    </item>
    
    <item>
      <title>Ubuntu Hotspot配置</title>
      <link>https://zylhorse.github.io/blog/linux/ubuntu-hotspot/</link>
      <pubDate>Wed, 11 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/linux/ubuntu-hotspot/</guid>
      <description>背景 配置瘦客户机，进行自组网，摒弃复杂的网络环境
环境配置   网卡Master模式
 安装 $ apt install iw 检查 iw list  Supported interface modes:* IBSS* managed //作为客户端接入AP* AP // 作为无线接入点使用* AP/VLAN* monitor* P2P-client* P2P-GO* P2P-device 如果显示以上内容，则该网卡支持作为无线AP使用
   Wlan Interface
 查看: ifconfig -a enp2s0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt; mtu 1500inet 172.16.3.173 netmask 255.255.255.0 broadcast 172.16.3.255inet6 fe80::6600:6aff:fe02:755a prefixlen 64 scopeid 0x20&amp;lt;link&amp;gt;ether 64:00:6a:02:75:5a txqueuelen 1000 (Ethernet)RX packets 63949 bytes 79546938 (79.</description>
    </item>
    
    <item>
      <title>Ubuntu依赖包的离线打包和安装</title>
      <link>https://zylhorse.github.io/blog/linux/%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E6%BA%90/</link>
      <pubDate>Mon, 02 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/linux/%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E6%BA%90/</guid>
      <description>Ubuntu 16.04离线安装步骤 宿主机打包   清理apt 缓冲区
$ sudo rm -rf /var/cache/apt/archives/*
  下载所需组件
$ sudo apt-get -d install &amp;lt;包名&amp;gt;
  创建目录，并拷贝
$ mkdir &amp;lt;your-path&amp;gt;$ cp -r /var/cache/apt/archives &amp;lt;your-path&amp;gt;  修改目录权限
$ chown -R &amp;lt;your-path&amp;gt;
  建立依赖关系
$ sudo apt install dpkg-dev$ cd &amp;lt;your-path&amp;gt;$ sudo dpkg-scanpackages archives /dev/null | gzip &amp;gt; &amp;lt;your-path&amp;gt;/archives/Packages.gz  拷贝到离线系统
$ scp -r &amp;lt;your-path&amp;gt; &amp;lt;离线系统&amp;gt;
  离线系统安装   修改apt源</description>
    </item>
    
    <item>
      <title>制作linux系统服务</title>
      <link>https://zylhorse.github.io/blog/linux/ubuntu%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Thu, 08 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/linux/ubuntu%E6%9C%8D%E5%8A%A1/</guid>
      <description>服务制作   在/etc/init.d/ 下以管理员权限新建文件，在本例中为location_server.
  使用以下模板修改启动脚本的内容
#!/bin/bash### BEGIN INIT INFO## Provides: location_server# Required-Start: $local_fs $remote_fs# Required-Stop: $local_fs $remote_fs# Default-Start: 2 3 4 5# Default-Stop: 0 1 6# Short-Description: initscript# Description: This file should be used to construct scripts to be placed in /etc/init.d.#### END INIT INFO## Fill in name of program here.PROG=&amp;quot;location_server&amp;quot;PROG_PATH=&amp;quot;/opt/location_server&amp;quot; ## Not need, but sometimes helpful (if $PROG resides in /opt for example).</description>
    </item>
    
    <item>
      <title>Ubuntu安装配置shadowsocks</title>
      <link>https://zylhorse.github.io/blog/linux/shadowsocks/shadowsocks/</link>
      <pubDate>Sat, 12 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/linux/shadowsocks/shadowsocks/</guid>
      <description>ubuntu shadowsocks 描述 ubuntu 下 shadowssocks 安装
安装shadowsocks-libev $ sudo apt-get install software-properties-common -y $ sudo add-apt-repository ppa:max-c-lv/shadowsocks-libev -y $ sudo apt-get update $ sudo apt install shadowsocks-libev 编写配置文件 配置文件需要写入你的shadowsocks账号的信息，启动shadowsocks时需要加载这些信息，具体如下： 创建配置文件： $ sudo vi /etc/shadowsocks-libev.json 在配置文件中输入以下信息： { &amp;quot;server&amp;quot;:&amp;quot;XXXX服务器地址&amp;quot;, &amp;quot;server_port&amp;quot;:XXXX端口, &amp;quot;local_address&amp;quot;:&amp;quot;127.0.0.1&amp;quot;, &amp;quot;local_port&amp;quot;:1080, &amp;quot;password&amp;quot;:&amp;quot;XXXX密码&amp;quot;, &amp;quot;timeout&amp;quot;:60, &amp;quot;method&amp;quot;:&amp;quot;chacha20-ietf-poly1305&amp;quot;, &amp;quot;fast_open&amp;quot;:false, &amp;quot;workers&amp;quot;:1 }  XXXX需要改成你的账号对应的具体信息，method就是加密方式，这里就是chacha20-ietf-poly1305,这个要看你的账号具体要求的加密方式。
 运行shadowsocks $ ss-local -c /etc/shadowsocks-libev.json &amp;amp;  其中 &amp;amp;是将其放在后台运行
 设置全局代理 进入 系统设置 -&amp;gt; 网络 -&amp;gt; 网络代理，方法选择手动，然后设置Socks主机127.0.0.1， 后面端口这是1080， 然后点击应用到整个系统，输入密码即可。
 缺点： 这样你使用的网络都是通过代理访问的，比如说我在登录微信的时候，居然提示我在未知地点登录，这样比较浪费流量，访问国内网络也使用代理，会导致访问国内网络网速较慢。所以可以使用浏览器代理，只在浏览器访问中使用代理。</description>
    </item>
    
    <item>
      <title>Ubuntu安装配置v2ray</title>
      <link>https://zylhorse.github.io/blog/linux/shadowsocks/v2raya/</link>
      <pubDate>Sat, 12 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/linux/shadowsocks/v2raya/</guid>
      <description>从软件源安装  debian/ubuntu 请确保已正确安装 v2ray-core
我们提供了 Linux 下的一键安装脚本：
 运行下面的指令下载并安装 V2Ray。当 yum 或 apt-get 可用的情况下，此脚本会自动安装 unzip 和 daemon。 这两个组件是安装 V2Ray 的必要组件。如果你使用的系统不支持 yum 或 apt-get，请自行安装 unzip 和 daemon
 # download scriptcurl -O https://cdn.jsdelivr.net/gh/v2rayA/v2rayA@master/install/go.sh# install v2ray-core from jsdelivrsudo bash go.sh准备完毕后：
# add public keywget -qO - https://raw.fastgit.org/v2rayA/v2raya-apt/master/key/public-key.asc | sudo apt-key add -# add V2RayA&#39;s repositoryecho &amp;quot;deb https://raw.fastgit.org/v2rayA/v2raya-apt/master/ v2raya main&amp;quot; | sudo tee /etc/apt/sources.list.d/v2raya.listsudo apt update# install V2RayAsudo apt install v2raya部署完毕后，访问该机器的2017端口即可使用，如http://localhost:2017。</description>
    </item>
    
    <item>
      <title>VMWare之Linux系统磁盘扩容</title>
      <link>https://zylhorse.github.io/blog/vmware/vmware-ubuntu-%E6%89%A9%E5%AE%B9%E7%A3%81%E7%9B%98/</link>
      <pubDate>Fri, 11 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/vmware/vmware-ubuntu-%E6%89%A9%E5%AE%B9%E7%A3%81%E7%9B%98/</guid>
      <description>在VMWARE中扩容虚拟机磁盘大小 需要删除快照， 最好先克隆备份；
查看扩容磁盘 调整完后，重新打开虚拟机，使用fdisk -l查看，可以看到我们刚刚扩容的空间已经可以看到，但没有分区，还不能使用。/dev/sda已经拥有了扩大的空间。
分区 使用Linux的fdisk分区工具给磁盘/dev/sda分区，更可以根据提示输入m查看帮助信息，再输入n(表示增加分区)，回车后输入p(创建主分区)， 回车后partition number输入3(因为上面已经有两个分区sda1和sda2)，回车会提示输入分区的start值(通过fdisk -l 可以看出sda2的end值为3917)， 我们可以根据提示指定start值为3917，end值为默认即可(即当前最大值)，回车后输入W进行保存，分区划分完毕。
修改分区ID 可以看到/dev/sda3的Id号为83，我们要将其改成8e(LVM卷文件系统的Id)，具体方法同上根上部中的磁盘分区大同小异，输入fdisk /dev/sda, 选择t(change a partition&#39;s system id 改变一个分区的系统ID)回车，然后选择分区3回车，然后输入L回车。然后输入8e回车，然后输入w，保存修改的分区信息。 最后输入fdisk -l ,查看ID是否修改成功。修改成功后必须重新启动linux系统才能进行后面的操作。
格式化分区 系统重启后，格式化新的分区为ext4格式。
初始化物理卷 格式化后，创建PV. 用pvdisplay查看当前的物理卷。然后用pvcreate指令用于将物理硬盘分区初始化为物理卷，以便被LVM使用。 要创建物理卷必须首先对硬盘进行分区，并且将硬盘分区的类型设置为8e后，才能使用pvcreat指令将分区初始化为物理卷。pvcreate /dev/sda3,创建完后， 我们可以再用pvdisplay查看到新创建的物理卷。
扩展VG 扩展VG：当前需要查看扩充的lvm组名，可以通过vgdisplay查看，在此例中我们的组名为 VolGroup,并可以看到里面的空间只有20多G。 然后用vgextend指令用于动态的扩展卷组，它通过向卷组中添加物理卷来增加卷组的容量。vgextend VolGroup /dev/sda3,添加成功后， 我们可以用vgdisplay再次查看，容量已经添加进去。
扩容root lvextend -L+269.95G /dev/VolGroup/lv_root /dev/sda3命令扩展空间到root下，扩容的空间要略小于VG的free空间，因此这里只输入了269.95G. 然后通过df -h查看，root空间还是没变，因为我们差最后最关键的一部。
扩容文件系统 使用使用resize2fs命令，用于扩大或者缩小未挂载的ext2,ext3或者是ext4文件系统。具体命令为：resize2fs -p /dev/mapper/VolGroup-lv_root 290G 。 然后再用df -h查看，扩容成功。</description>
    </item>
    
    <item>
      <title>Ubuntu安装配置无线网卡</title>
      <link>https://zylhorse.github.io/blog/linux/ubuntu-wlan/</link>
      <pubDate>Wed, 11 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/linux/ubuntu-wlan/</guid>
      <description>查看所有网络 $ ifconfig -a
打开无线网卡 $ ifconfig wlan0 up
wlan 工具 $ apt-get install wpasupplicant
连接无线网络 wpa_passphrase 无线网络SSID无线网络密码 &amp;gt; 配置文件名
配置无线网络  $ auto wlan0 $ iface wlan0 inet dhcp $ wpa-conf /etc/wpa_config.conf  修改网卡名称   $ vim /etc/default/grubGRUB_CMDLINE_LINUX=&amp;quot;net.ifnames=0 biosdevname=0&amp;quot; $ update-grub  若提示没有此命令，请先输入安装命令 $ apt-get install grub2-common</description>
    </item>
    
    <item>
      <title>Linux Shell 常用命令记录</title>
      <link>https://zylhorse.github.io/blog/linux/shell/</link>
      <pubDate>Sun, 08 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/linux/shell/</guid>
      <description>命令 grep 作用: 查询匹配条件的文件
使用: grep [OPTION]... PATTERN [FILE]...
OPTION: -r #递归查询目录-n #打印匹配行号-l #打印匹配文件-L #打印不匹配文件-c #打印匹配数量-I #过滤二进制文件 --binary-files=without-match-a #只查询文本文件 --binary-files=text--binary-files=Type # Type: binary,text,without-matchsed 作用: 替换文本内容
使用: sed [OPTION]... {script-only-if-no-other-script} [input-file]...
OPTION:-e # 使用脚本处理文本内容-i # 直接将处理结果写入文件script:a # 在下一行增加内容c # 替换当前行内容d # 删除当前行内容i # 在上一行增加内容s # 替换匹配内容示例   查找目录下所有包含查找内容的文件
$ grep -rnI &amp;quot;查找内容&amp;quot; ./  替换新的内容到目录下所有包含查找内容的文件</description>
    </item>
    
    <item>
      <title>记录linux常规问题和解决方案</title>
      <link>https://zylhorse.github.io/blog/linux/%E5%B8%B8%E8%A7%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 08 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/linux/%E5%B8%B8%E8%A7%84%E9%97%AE%E9%A2%98/</guid>
      <description>Ubuntu国内源 清华大学 https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/
问题：
ubuntu:~$ sudo apt update Ign:1 https://mirrors.tuna.tsinghua.edu.cn/ubuntu bionic InRelease Ign:2 https://mirrors.tuna.tsinghua.edu.cn/ubuntu bionic-updates InRelease Ign:3 https://mirrors.tuna.tsinghua.edu.cn/ubuntu bionic-backports InRelease Hit:4 https://apt.releases.hashicorp.com bionic InRelease Ign:5 https://mirrors.tuna.tsinghua.edu.cn/ubuntu bionic-security InRelease Err:6 https://mirrors.tuna.tsinghua.edu.cn/ubuntu bionic ReleaseCertificate verification failed: The certificate is NOT trusted. The certificate chain uses expired certificate. Could not handshake: Error in the certificate verification. [IP: 101.6.15.130 443]Err:7 https://mirrors.tuna.tsinghua.edu.cn/ubuntu bionic-updates ReleaseCertificate verification failed: The certificate is NOT trusted. The certificate chain uses expired certificate.</description>
    </item>
    
    <item>
      <title>linux磁盘管理和lvm磁盘扩容</title>
      <link>https://zylhorse.github.io/blog/linux/%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 11 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/linux/%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/</guid>
      <description>reference
磁盘管理 硬盘分区 | Hard disk add new partition   显示硬盘及所属分区情况。在终端窗口中输入如下命令： $ sudo fdisk -l
 显示当前的硬盘及所属分区的情况。 系统提示：DIsk /dev/sdb doesn&amp;rsquo;t contain a valid partition table。 如图所示    对硬盘进行分区。在终端窗口中输入如下命令： $ sudo fdisk /dev/sdb
 在Command (m for help)提示符后面输入m显示一个帮助菜单， 如图所示。 在Command (m for help)提示符后面输入n，执行 add a new partition指令给硬盘增加一个新分区。 出现Command action时，输入e，指定分区为扩展分区（extended）。 出现Partition number(1-4)时，输入１表示只分一个区。 后续指定起启柱面（cylinder）号完成分区, 如图所示。    在Command (m for help)提示符后面输入p，显示分区表。
 系统提示如图所示：  Device Boot Start End Blocks Id System/dev/sdb1 1 26108 209712478+ 5 Extended  在Command (m for help)提示符后面输入w，保存分区表。</description>
    </item>
    
    <item>
      <title>ubutnu本地安装实操</title>
      <link>https://zylhorse.github.io/blog/linux/ubuntu%E5%AE%89%E8%A3%85/</link>
      <pubDate>Tue, 11 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/linux/ubuntu%E5%AE%89%E8%A3%85/</guid>
      <description>ubuntu U盘安装 遇到类似加载镜像文件问题，最简单粗暴的解决方案就是把挂载ubuntu server镜像文件至cdrom目录
具体步骤如下：
  复制安装镜像至U盘
  进入ubuntu控制台，可以直接通过Alt+F2进入终端环境
  查看u盘设备号 通过命令：ls /dev/sd*
查看U盘设备，通常U盘设备为sdb,sdc,sdd等名称或以此为前缀名称。
 如果不确定，可以将U盘拔出，然后再用 ls /dev/sd*命令查看设备，发现少了的那个就是U盘。 但一般情况下，再次插入，U盘设备号会有所改变，例如原来是sdb4，重新插入，查看一下可能是sdb5，以最后插入查看的设备号为准。    查看到U盘设备号后，卸载设备，如下：
umount /dev/sdb4 #sdb4就是当前查看得到U盘设备  重新挂载U盘,可以创建一个目录，然后将U盘挂载至新建目录，目的是为了找到U盘里的ubuntu server安装镜像文件，操作命令如下：
mkdir /mnt/usbmount /dev/sdb4 /mnt/usb # 将U盘挂载到该目录下  挂载ubuntu server安装镜像文件至cdrom目录, 进入U盘目录(/mnt/usb )，找到ubuntu server安装镜像文件，并挂载镜像，操作参考如下：
cd /mnt/usbmount ubuntu-16.04.4-server-amd64.iso /cdrom #挂载镜像文件位于U盘根目录  退出shell，进入安装向导界面安装系统。可以通过Alt+F1或者输入exit退出shell
  </description>
    </item>
    
    <item>
      <title>linux系统信号</title>
      <link>https://zylhorse.github.io/blog/linux/%E7%B3%BB%E7%BB%9F%E4%BF%A1%E5%8F%B7/</link>
      <pubDate>Sun, 22 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/linux/%E7%B3%BB%E7%BB%9F%E4%BF%A1%E5%8F%B7/</guid>
      <description>信号列表   SIGHUP
本信号在用户终端连接(正常或非正常)结束时发出, 通常是在终端的控制进程结束时, 通知同一 session 内的各个作业, 这时它们与控制终端不再关联。 登录 Linux 时，系统会分配给登录用户一个终端( Session )。在这个终端运行的所有程序，包括前台进程组和后台进程组，一般都属于这个 Session 。 当用户退出 Linux 登录时，前台进程组和后台有对终端输出的进程将会收到 SIGHUP 信号。这个信号的默认操作为终止进程，因此前台进程组和后台有终端输出的进程就会中止。 不过可以捕获这个信号，比如 wget 能捕获 SIGHUP 信号，并忽略它，这样就算退出了Linux 登录，wget 也能继续下载。 此外，对于与终端脱离关系的守护进程，这个信号用于通知它重新读取配置文件。
  SIGINT
程序终止( interrupt )信号, 在用户键入 INTR 字符(通常是 Ctrl + C )时发出，用于通知前台进程组终止进程。
  SIGQUIT
和 SIGINT 类似, 但由 QUIT 字符(通常是 Ctrl + / )来控制. 进程在因收到 SIGQUIT 退出时会产生 core 文件, 在这个意义上类似于一个程序错误信号。
  SIGILL
执行了非法指令. 通常是因为可执行文件本身出现错误, 或者试图执行数据段. 堆栈溢出时也有可能产生这个信号。
  SIGTRAP</description>
    </item>
    
  </channel>
</rss>
