<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Certificate on zylhorse blog</title>
    <link>https://zylhorse.github.io/tags/certificate/</link>
    <description>Recent content in Certificate on zylhorse blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 22 May 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://zylhorse.github.io/tags/certificate/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>申请免费SSL证书</title>
      <link>https://zylhorse.github.io/blog/security/%E7%94%B3%E8%AF%B7%E5%85%8D%E8%B4%B9%E8%AF%81%E4%B9%A6/</link>
      <pubDate>Wed, 22 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/security/%E7%94%B3%E8%AF%B7%E5%85%8D%E8%B4%B9%E8%AF%81%E4%B9%A6/</guid>
      <description>证书申请 ssl证书申请的3个主要步骤
  制作CSR文件
所谓CSR就是由申请人制作的Certificate Secure Request证书请求文件。制作过程中，系统会产生2个密钥，一个是公钥就是这个CSR文件，另外一个是私钥，存放在服务器上。要制作CSR文件，申请人可以参考WEB SERVER的文档，一般APACHE等，使用OPENssl命令行来生成KEY+CSR2个文件，Tomcat，JBoss，Resin等使用KEYTOOL来生成JKS和CSR文件，IIS通过向导建立一个挂起的请求和一个CSR文件。
  CA认证
将CSR提交给CA，CA一般有2种认证方式：
   域名认证：一般通过对管理员邮箱认证的方式，这种方式认证速度快，但是签发的证书中没有企业的名称; 企业文档认证：需要提供企业的营业执照。 也有需要同时认证以上2种方式的证书，叫EV ssl证书，这种证书可以使IE7以上的浏览器地址栏变成绿色，所以认证也最严格。  证书安装
在收到CA的证书后，可以将证书部署上服务器，一般APACHE文件直接将KEY+CER复制到文件上，然后修改httpD.CONF文件;TOMCAT等，需要将CA签发的证书CER文件导入JKS文件后，复制上服务器，然后修改SERVER.XML;IIS需要处理挂起的请求，将CER文件导入。   Letsencrypt证书申请   环境配置 $ sudo apt-get install letsencrypt
  生成证书, 需要用到80端口，先停止相关进程：
$ sudo letsencrypt certonly --email xxx@xxx.com -d www.example.comxxx@xxx.com 为邮箱,用于后续证书状态(过期)通知；
www.example.com 为生成服务器证书域名；
  多域名证书(收费)
*.zylhorse.com 通配符证书匹配所有三级域名，eg：ys.zylhorse.comys1.zylhorse.compin.zylhorse.com  </description>
    </item>
    
    <item>
      <title>生成自签名SSL证书</title>
      <link>https://zylhorse.github.io/blog/security/%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6/</link>
      <pubDate>Mon, 22 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/security/%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6/</guid>
      <description>#!/bin/sh# create self-signed server certificate:SSLDIR=$PWD/sslSERVERDIR=$SSLDIR/serverCLIENTDIR=$SSLDIR/clientOPENSSLFILE=$PWD/openssl.cnfsu rootsudo rm -rf $SSLDIRsudo mkdir $SSLDIRsudo mkdir $SERVERDIRsudo mkdir $CLIENTDIRsudo mkdir $SSLDIR/demoCAsudo mkdir $SSLDIR/demoCA/newcertssudo touch $SSLDIR/demoCA/index.txtsudo touch $SSLDIR/demoCA/serialsudo echo 01 &amp;gt; $SSLDIR/demoCA/serialcd $SSLDIRread -p &amp;quot;Enter your domain [www.example.com]: &amp;quot; DOMAINsudo sed -e &amp;quot;s|192.168.10.33|$DOMAIN|g&amp;quot; -i $OPENSSLFILESUBJECT=&amp;quot;/C=CN/ST=Beijing/L=Beigjing/O=YongNuo/OU=CEO/CN=$DOMAIN/emailAddress=zylhorse@126.com&amp;quot;echo &amp;quot;Create Ca key / cert ...&amp;quot;sudo openssl req -new -x509 -subj $SUBJECT -keyout $SSLDIR/ca.</description>
    </item>
    
    <item>
      <title>生成自签名SSL免密证书</title>
      <link>https://zylhorse.github.io/blog/security/%E7%94%9F%E6%88%90%E5%85%8D%E5%AF%86%E8%AF%81%E4%B9%A6/</link>
      <pubDate>Sat, 13 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/security/%E7%94%9F%E6%88%90%E5%85%8D%E5%AF%86%E8%AF%81%E4%B9%A6/</guid>
      <description>#!/bin/sh# create self-signed server certificate:SSLDIR=$PWD/sslSERVERDIR=$SSLDIR/serverCLIENTDIR=$SSLDIR/clientOPENSSLFILE=$PWD/openssl.cnfsudo rm -rf $SSLDIRsudo mkdir $SSLDIRsudo mkdir $SERVERDIRsudo mkdir $CLIENTDIRsudo mkdir $SSLDIR/demoCAsudo mkdir $SSLDIR/demoCA/newcertssudo touch $SSLDIR/demoCA/index.txtsudo touch $SSLDIR/demoCA/serialsudo echo 01 &amp;gt; $SSLDIR/demoCA/serialcd $SSLDIRread -p &amp;quot;Enter your domain [www.example.com]: &amp;quot; DOMAINsudo sed -i &amp;quot;s/subjectAltName=IP.*/subjectAltName=IP:$DOMAIN/g&amp;quot; $OPENSSLFILESUBJECT=&amp;quot;/C=CN/ST=Beijing/L=Beigjing/O=YongNuo/OU=CEO/CN=$DOMAIN/emailAddress=zylhorse@126.com&amp;quot;echo &amp;quot;Create Ca key / cert ...&amp;quot;sudo openssl req -new -x509 -subj $SUBJECT -keyout $SSLDIR/ca.</description>
    </item>
    
    <item>
      <title>Nginx配置ssl证书</title>
      <link>https://zylhorse.github.io/blog/nginx/%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 11 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/nginx/%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE/</guid>
      <description>  nginx 配置
$ vim /etc/nginx/config.dlisten 443 ssl;listen [::]:443 ssl;ssl_certificate /etc/nginx/fullchain1.pem;ssl_certificate_key /etc/nginx/privkey1.pem;  配置生效 $ nginx -s reload
  </description>
    </item>
    
  </channel>
</rss>
