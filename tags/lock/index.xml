<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lock on zylhorse blog</title>
    <link>https://zylhorse.github.io/tags/lock/</link>
    <description>Recent content in Lock on zylhorse blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 02 Oct 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://zylhorse.github.io/tags/lock/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>分布式锁</title>
      <link>https://zylhorse.github.io/blog/distribution-system/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link>
      <pubDate>Wed, 02 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/distribution-system/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</guid>
      <description>分布式锁 应用场景  多节点并发的对数据进行操作； 多节点并发的执行同一个任务， 请求同一接口；  分布式锁条件  在分布式系统环境下， 一个资源同时只能被一个线程执行； 高可用的获取锁和释放锁 高性能的获取锁和释放锁 具备可重入性， 同一线程可以并发使用； 具备锁失效机制，不会死锁 非阻塞特性， 即获取锁失败需要返回失败；  分布式锁实现  redis分布式锁 mutext.go:  package redsync// lockfunc (m *Mutex) Lock() error {// generate mutex identifier, used for unlock and extendvalue, err := m.genValueFunc()if err != nil {return err}// acquire the lock and try some times when failed.for i := 0; i &amp;lt; m.</description>
    </item>
    
    <item>
      <title>并发编程-乐观锁和悲观锁</title>
      <link>https://zylhorse.github.io/blog/concurrence/%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81/</link>
      <pubDate>Fri, 16 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/concurrence/%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81/</guid>
      <description>乐观锁 乐观锁假设数据一般不会修改， 所以在数据提交修改的时候， 才会对数据冲突进行检查；如果冲突则交给用户决定如何去做；对数据竞争持乐观态度
乐观锁实现 cas（compare and swap）  CAS机制当中使用了3个基本操作数：内存地址V，旧的预期值A，要修改的新值B。 更新一个变量的时候，只有当变量的预期值A和内存地址V当中的实际值相同时，才会将内存地址V对应的值修改为B。 CAS一般需要加for循环，实现类似自旋乐观锁。  mvcc（Multi-Version Concurrency Control）  每行数据都增加两个隐藏字段，一个记录创建的版本号，一个记录删除的版本号 在多版本并发控制中，为了保证数据操作在多线程过程中，保证事务隔离的机制，降低锁竞争的压力，保证较高的并发量。 在每开启一个事务时，会生成一个事务的版本号，被操作的数据会生成一条新的数据行（临时），但是在提交前对其他事务是不可见的，对于数据的更新（包括增删改）操作成功，会将这个版本号更新到数据的行中，事务提交成功，将新的版本号更新到此数据行中，这样保证了每个事务操作的数据，都是互不影响的，也不存在锁的问题。  悲观锁 悲观锁具有强烈的独占性和排他性；一般认为数据被并发修改的概率较大，所以需要在修改前先加锁；对数据竞争持态度。</description>
    </item>
    
    <item>
      <title>并发编程-线程锁和死锁</title>
      <link>https://zylhorse.github.io/blog/concurrence/%E7%BA%BF%E7%A8%8B%E9%94%81/</link>
      <pubDate>Fri, 16 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://zylhorse.github.io/blog/concurrence/%E7%BA%BF%E7%A8%8B%E9%94%81/</guid>
      <description>锁 在多线程编程中， 对共享资源竞争的保护机制；
锁缺点  引起线程阻塞 申请和释放锁， 增加线程的调度切换， 影响系统性能 容易造成死锁和活锁等问题 优先级反转 不公平 效率低  公平锁 在锁上等待时间最长的线程优先获取锁的使用权
非公平锁 线程获取锁的使用权是随机的， cpu时间片轮到哪个线程， 哪个线程就获取到锁；
锁类型  自旋锁（spin lock） ： 自旋锁如果已经被其他线程获取，则调用者就一直循环等待；自旋锁时非阻塞锁， 循环等待时会不断消耗cpu， 不会使线程挂起； 互斥锁（mutex lock）： 互斥锁被其他线程获取， 则调用者会阻塞线程， 线程被挂起， 不会消耗cpu； 读写锁（read write lock）：读写锁允许资源可以同时被多个线程读取， 但是读写时互斥的且同时只能有一个线程去写； 条件锁 （condition lock）：条件锁检查条件，如果条件不满足则线程阻塞等待， 并解锁mutex。当收到其他线程的notify条件状态改变后，线程苏醒，获取mutex并上锁。  响应中断  一个线程霸占锁， 手动中断该线程后，使得该锁发出中断响应； 其他等待线程收到该中断信息，就可以获取到锁；  限时等待 线程在获取锁时， 设置等待时间， 超过该时间， 则停止等待， 获取锁失败；
死锁 多个线程在运行中因争夺共享资源出现互相等待的现象
死锁发生条件  互斥： 资源一次只能被一个进程占用；其他进程请求需要等待； 请求和保持： 一个进程至少占用一个资源， 并等待申请其他资源， 而该资源被其他进程占用。 不剥夺：进程占用的资源只能自己释放， 其他进程不能强行夺取； 循环等待：有一组等待进程 {P0，P1，…，Pn}，P0 等待的资源为 P1 占有，P1 等待的资源为 P2 占有，……，Pn-1 等待的资源为 Pn 占有，Pn 等待的资源为 P0 占有   四个条件必须同时成立才会出现死锁。</description>
    </item>
    
  </channel>
</rss>
